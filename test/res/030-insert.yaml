Prepare:
    Data: []
Tests:
    query:
        - query: "INSERT INTO `table_hash_string_range_number`  SET `hash` =  'hash1',  `range` =  1,  `number` = 1,  test_increment = 1,  test_comment = '  /* comment */ ', `boolean` =true, nulled = null, `array` = [1,2, 3 ], `object`= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}, delete_me = 'delete_me'"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.test_comment, '  /* comment */ ')
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])
        - query: "INSERT INTO `test_hash` SET `hash` =  'hash1', `number`=1, `boolean`=true,  `nulled`=null, `array`=[1,2, 3 ], `object`= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])


        - query: INSERT INTO `test_hash` SET `hash` = 'test-ss-ns', ss = new StringSet(['asd','fgh','jkl']), ns = new NumberSet([99,66,33])
        - query: SELECT * from `test_hash` WHERE `hash` = 'test-ss-ns'
          validations:
              - key: data[0].ss[2]
                value: "'jkl'"
              - key: data[0].ns[2]
                value: 33


        # test insert duplicate key
        - query:  INSERT INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = true
        - query:  INSERT INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = false
          # should fail with ConditionalCheckFailedException
          shouldFail: true
        - query:  INSERT IGNORE INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = false
        - query:  SELECT * FROM `test_hash` WHERE `hash` =  'test-hash-insert'
          validations:
              - key: data[0].bool
                value: true

