Prepare:
    Data: []
Tests:
    query:
        - query: "INSERT INTO `table_hash_string_range_number`  SET `hash` =  'hash1',  `range` =  1,  `number` = 1,  test_increment = 1,  test_comment = '  /* comment */ ', `boolean` =true, nulled = null, `array` = [1,2, 3 ], `object`= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}, delete_me = 'delete_me'"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.test_comment, '  /* comment */ ')
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])
        - query: "INSERT INTO `test_hash` SET `hash` =  'hash1', `number`=1, `boolean`=true,  `nulled`=null, `array`=[1,2, 3 ], `object`= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])


        - query: INSERT INTO `test_hash` SET `hash` = 'test-ss-ns', ss = new StringSet(['asd','fgh','jkl']), ns = new NumberSet([99,66,33])
        - query: SELECT * from `test_hash` WHERE `hash` = 'test-ss-ns'
          validations:
              - key: data[0].ss[2]
                value: "'jkl'"
              - key: data[0].ns[2]
                value: 33


        # test insert duplicate key
        - query:  INSERT INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = true
        - query:  INSERT INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = false
          # should fail with ConditionalCheckFailedException
          shouldFail: true
        - query:  INSERT IGNORE INTO `test_hash` SET `hash` =  'test-hash-insert', `bool` = false
        - query:  SELECT * FROM `test_hash` WHERE `hash` =  'test-hash-insert'
          validations:
              - key: data[0].bool
                value: true


        - title: INSERT INTO tbl_name SET `hash` = <STRING>, `range` = <NUMBER>, d = new Date('2018-07-05T07:50:15.416Z').getTime()
          query: INSERT INTO `table_hash_string_range_number` SET `hash` = 'test-insert-date', `range` = 1, d = new Date('2018-07-05T07:50:15.416Z').getTime()
          dataItem: 
             table: table_hash_string_range_number
             item: { hash: 'test-insert-date',  range: 1 }
          validations:
             - key: dataItem.d
               value: 1530777015416
          log: false


        - title: INSERT INTO tbl_name VALUES ( <JSON> )
          query: 
            |
            INSERT INTO 
                `table_hash_string_range_number`
            VALUES ({ 
                "hash":  'test-insert-sql',
                'range':  1,
                'number': 1,  
                'boolean': true, 
                'null': null,
                'array': [1,2, 3 ], 
                'object': { 
                    "substring": "aaa",
                    subnumber: 1, 
                    subobject: {}, 
                    subarray: []
                },
            })
          validations: []

        - title: INSERT INTO tbl_name VALUES ( <JSON> ), ( <JSON> )
          log: false
          query: 
            |
            INSERT INTO 
                `table_hash_string_range_number`
            VALUES 
                ( { "hash":  'test-batchinsert-sql', 'range':  1 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  2 } )
          validations: []

        - title: INSERT INTO tbl_name VALUES ( <JSON> ), ( <JSON> )
          log: false
          query: 
            |
            INSERT INTO 
                `table_hash_string_range_number`
            VALUES 
                ( { "hash":  'test-batchinsert-sql', 'range':  1 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  2 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  3 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  4 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  5 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  6 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  7 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  8 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  9 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  10 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  11 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  12 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  13 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  14 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  15 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  16 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  17 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  18 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  19 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  20 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  21 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  22 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  23 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  24 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  25 } ),
                ( { "hash":  'test-batchinsert-sql', 'range':  26 } )

          validations: []
          shouldFail: true