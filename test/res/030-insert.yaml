Prepare:
    Data: []
Tests:
    query:
        - query: "INSERT INTO `table_hash_string_range_number`  SET hash =  'hash1',  range =  1,  number = 1,  test_increment = 1,  test_comment = '  /* comment */ ', boolean =true, nulled = null, array = [1,2, 3 ], object= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}, delete_me = 'delete_me'"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.test_comment, '  /* comment */ ')
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])
        - query: "INSERT INTO `test_hash` SET hash =  'hash1', `number`=1, `boolean`=true,  `nulled`=null, array=[1,2, 3 ], object= { aaa:1,bbb:2, ccc: \" some string \", ddd: {ddd1: 1}, eee: [1,'eee1']}"
          validations: []
                # assert.equal(item.number, 1)
                # assert.equal(item.boolean, true)
                # assert.equal(item.nulled, null)
                # assert.deepEqual(item.array, [1,2,3])
        - query: INSERT INTO `table_hash_string_range_number` SET  hash =  'hash1',  range =  1
          shouldFail: true
          validations: []
          # err && err.code === 'ConditionalCheckFailedException'

        - query: INSERT INTO `test_hash` SET hash =  'hash1' 
          shouldFail: true
          validations: []
          # err && err.code === 'ConditionalCheckFailedException'

