/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,17],$V1=[1,18],$V2=[1,19],$V3=[1,20],$V4=[1,27],$V5=[1,21],$V6=[1,22],$V7=[1,23],$V8=[1,24],$V9=[1,28],$Va=[1,26],$Vb=[5,6],$Vc=[5,6,124,126],$Vd=[1,37],$Ve=[1,38],$Vf=[5,6,126],$Vg=[1,58],$Vh=[1,59],$Vi=[1,60],$Vj=[1,56],$Vk=[1,51],$Vl=[1,57],$Vm=[21,22,92],$Vn=[1,66],$Vo=[5,6,29,54,65,71,73,97,99,104,107,110,112,117,124,125,126,132,135,141,146,147,148,149,150,151,153,157,165,167,176,181],$Vp=[1,83],$Vq=[5,6,54,107],$Vr=[1,84],$Vs=[1,85],$Vt=[1,86],$Vu=[1,87],$Vv=[5,6,54,73,90,91,92,93,107],$Vw=[1,89],$Vx=[5,6,53,54,73,90,91,92,93,107],$Vy=[1,93],$Vz=[54,117],$VA=[54,107],$VB=[5,6,54,73,90,91,107],$VC=[2,120],$VD=[5,6,124,126,141],$VE=[1,156],$VF=[1,169],$VG=[1,170],$VH=[1,171],$VI=[1,173],$VJ=[1,172],$VK=[1,174],$VL=[1,177],$VM=[5,6,54],$VN=[5,6,53,54,63,107],$VO=[54,63],$VP=[2,91],$VQ=[1,203],$VR=[1,204],$VS=[53,54],$VT=[2,59],$VU=[1,213],$VV=[1,214],$VW=[1,230],$VX=[5,6,124,125,126],$VY=[1,251],$VZ=[1,252],$V_=[1,253],$V$=[1,249],$V01=[1,250],$V11=[1,245],$V21=[5,6,53,54,63,112,124,125,126,141],$V31=[5,6,112],$V41=[5,6,112,124,125,126,141],$V51=[1,287],$V61=[5,6,124,125,126,141],$V71=[1,293],$V81=[1,291],$V91=[1,294],$Va1=[1,295],$Vb1=[1,296],$Vc1=[1,297],$Vd1=[1,298],$Ve1=[1,299],$Vf1=[1,300],$Vg1=[5,6,104,112,124,126,146,147,148,149,150,151,153,157],$Vh1=[5,6,104,112,124,125,126,146,147,148,149,150,151,153,157],$Vi1=[1,327],$Vj1=[1,332],$Vk1=[1,330],$Vl1=[1,333],$Vm1=[1,334],$Vn1=[1,335],$Vo1=[1,336],$Vp1=[1,337],$Vq1=[1,338],$Vr1=[1,339],$Vs1=[54,73],$Vt1=[2,272],$Vu1=[1,424],$Vv1=[2,274],$Vw1=[1,444],$Vx1=[54,73,171];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"main":3,"sql_stmt_list":4,"EOF":5,"SEMICOLON":6,"sql_stmt":7,"select_stmt":8,"insert_stmt":9,"update_stmt":10,"replace_stmt":11,"delete_stmt":12,"create_table_stmt":13,"show_tables_stmt":14,"drop_table_stmt":15,"describe_table_stmt":16,"drop_index_stmt":17,"scan_stmt":18,"debug_stmt":19,"name":20,"LITERAL":21,"BRALITERAL":22,"database_table_name":23,"DOT":24,"dynamodb_table_name":25,"database_index_name":26,"dynamodb_index_name":27,"signed_number":28,"NUMBER":29,"string_literal":30,"SINGLE_QUOTED_STRING":31,"DOUBLE_QUOTED_STRING":32,"XSTRING":33,"literal_value":34,"boolean":35,"TRUE":36,"FALSE":37,"boolean_value":38,"dynamodb_data_string":39,"dynamodb_raw_string":40,"dynamodb_data_number":41,"dynamodb_raw_number":42,"dynamodb_data_boolean":43,"dynamodb_raw_boolean":44,"dynamodb_data_null":45,"NULL":46,"dynamodb_raw_null":47,"dynamodb_data_undefined":48,"UNDEFINED":49,"dynamodb_data_array":50,"ARRAYLPAR":51,"array_list":52,"ARRAYRPAR":53,"COMMA":54,"array_value":55,"dynamodb_data_json":56,"dynamodb_raw_array":57,"array_list_raw":58,"array_value_raw":59,"dynamodb_raw_json":60,"JSONLPAR":61,"dynamodb_data_json_list":62,"JSONRPAR":63,"dynamodb_data_json_kv":64,"COLON":65,"dynamodb_data_json_list_raw":66,"dynamodb_raw_json_kv":67,"dynamodb_raw_stringset":68,"NEW":69,"STRINGSET":70,"LPAR":71,"stringset_list":72,"RPAR":73,"dynamodb_raw_numberset":74,"NUMBERSET":75,"numberset_list":76,"javascript_data_obj_date":77,"DATE":78,"javascript_raw_date_parameter":79,"javascript_raw_obj_date":80,"def_resolvable_expr":81,"javascript_raw_obj_math":82,"javascript_data_obj_math":83,"MATH":84,"javascript_raw_math_funcname":85,"javascript_raw_math_parameter":86,"RANDOM":87,"javascript_raw_expr":88,"dev_resolvable_value":89,"PLUS":90,"MINUS":91,"STAR":92,"SLASH":93,"INSERT":94,"def_insert_ignore":95,"INTO":96,"SET":97,"def_insert_columns":98,"VALUES":99,"def_insert_items":100,"IGNORE":101,"def_insert_item":102,"def_insert_onecolumn":103,"EQ":104,"UPDATE":105,"def_update_columns":106,"WHERE":107,"def_update_where":108,"def_update_onecolumn":109,"PLUSEQ":110,"def_update_where_cond":111,"AND":112,"REPLACE":113,"def_replace_columns":114,"def_replace_onecolumn":115,"DELETE":116,"FROM":117,"def_delete_where":118,"def_delete_where_cond":119,"def_select":120,"select_sort_clause":121,"limit_clause":122,"def_consistent_read":123,"LIMIT":124,"DESC":125,"CONSISTENT_READ":126,"distinct_all":127,"DISTINCT":128,"ALL":129,"def_select_columns":130,"def_select_onecolumn":131,"AS":132,"def_select_from":133,"def_select_use_index":134,"USE":135,"INDEX":136,"def_where":137,"select_where_hash":138,"select_where_range":139,"def_having":140,"HAVING":141,"having_expr":142,"SELECT":143,"where_expr":144,"bind_parameter":145,"OR":146,"GT":147,"GE":148,"LT":149,"LE":150,"BETWEEN":151,"where_between":152,"LIKE":153,"select_where_hash_value":154,"select_where_range_value":155,"select_where_between":156,"CONTAINS":157,"CREATE":158,"TABLE":159,"def_ct_typedef_list":160,"def_ct_pk":161,"def_ct_indexes":162,"def_ct_index_list":163,"def_ct_index":164,"LSI":165,"def_ct_projection":166,"GSI":167,"def_ct_throughput":168,"PRIMARY":169,"KEY":170,"THROUGHPUT":171,"PROJECTION":172,"KEYS_ONLY":173,"def_ct_projection_list":174,"def_ct_typedef":175,"STRING":176,"SHOW":177,"TABLES":178,"DROP":179,"DESCRIBE":180,"ON":181,"def_scan":182,"def_scan_limit_clause":183,"def_scan_consistent_read":184,"SCAN":185,"def_scan_columns":186,"def_scan_use_index":187,"def_scan_having":188,"def_scan_onecolumn":189,"def_scan_having_expr":190,"DEBUG":191,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",6:"SEMICOLON",21:"LITERAL",22:"BRALITERAL",24:"DOT",29:"NUMBER",31:"SINGLE_QUOTED_STRING",32:"DOUBLE_QUOTED_STRING",33:"XSTRING",36:"TRUE",37:"FALSE",46:"NULL",49:"UNDEFINED",51:"ARRAYLPAR",53:"ARRAYRPAR",54:"COMMA",61:"JSONLPAR",63:"JSONRPAR",65:"COLON",69:"NEW",70:"STRINGSET",71:"LPAR",73:"RPAR",75:"NUMBERSET",78:"DATE",84:"MATH",87:"RANDOM",90:"PLUS",91:"MINUS",92:"STAR",93:"SLASH",94:"INSERT",96:"INTO",97:"SET",99:"VALUES",101:"IGNORE",104:"EQ",105:"UPDATE",107:"WHERE",110:"PLUSEQ",112:"AND",113:"REPLACE",116:"DELETE",117:"FROM",124:"LIMIT",125:"DESC",126:"CONSISTENT_READ",128:"DISTINCT",129:"ALL",132:"AS",135:"USE",136:"INDEX",141:"HAVING",143:"SELECT",145:"bind_parameter",146:"OR",147:"GT",148:"GE",149:"LT",150:"LE",151:"BETWEEN",153:"LIKE",157:"CONTAINS",158:"CREATE",159:"TABLE",165:"LSI",167:"GSI",169:"PRIMARY",170:"KEY",171:"THROUGHPUT",172:"PROJECTION",173:"KEYS_ONLY",176:"STRING",177:"SHOW",178:"TABLES",179:"DROP",180:"DESCRIBE",181:"ON",185:"SCAN",191:"DEBUG"},
productions_: [0,[3,2],[4,3],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[20,1],[20,1],[23,3],[23,1],[25,1],[26,1],[27,1],[28,1],[30,1],[30,1],[30,1],[34,1],[34,1],[35,1],[35,1],[38,1],[38,1],[39,1],[39,1],[40,1],[40,1],[41,1],[42,1],[43,1],[43,1],[44,1],[44,1],[45,1],[47,1],[48,1],[50,3],[52,3],[52,1],[55,0],[55,1],[55,1],[55,1],[55,1],[55,1],[55,1],[57,3],[58,3],[58,1],[59,0],[59,1],[59,1],[59,1],[59,1],[59,1],[59,1],[56,3],[62,3],[62,1],[64,0],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[64,3],[60,3],[66,3],[66,1],[67,0],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[67,3],[68,7],[72,3],[72,1],[74,7],[76,3],[76,1],[77,5],[77,9],[80,5],[80,9],[79,0],[79,1],[82,1],[83,6],[85,1],[85,1],[86,0],[86,1],[88,1],[81,1],[81,3],[81,3],[81,3],[81,3],[81,3],[89,1],[89,1],[89,1],[89,1],[9,6],[9,6],[95,0],[95,1],[100,3],[100,1],[102,3],[98,3],[98,1],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[103,3],[10,6],[106,3],[106,1],[109,3],[109,3],[109,3],[109,3],[109,3],[109,3],[109,3],[109,3],[109,3],[108,1],[108,3],[111,3],[111,3],[111,3],[111,3],[11,5],[114,3],[114,1],[115,3],[115,3],[115,3],[115,3],[115,3],[115,3],[115,3],[12,5],[118,1],[118,3],[119,3],[119,3],[119,3],[119,3],[8,4],[122,0],[122,2],[121,0],[121,1],[123,0],[123,1],[127,0],[127,1],[127,1],[130,3],[130,1],[131,1],[131,1],[131,3],[133,2],[134,0],[134,3],[137,2],[137,4],[140,2],[140,0],[120,7],[144,1],[144,1],[144,1],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[144,3],[138,3],[154,1],[154,1],[154,1],[154,1],[139,3],[139,3],[139,3],[139,3],[139,3],[139,3],[139,3],[155,1],[155,1],[155,1],[155,1],[156,3],[156,3],[152,3],[152,3],[142,1],[142,1],[142,1],[142,1],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[142,3],[13,9],[162,0],[162,2],[163,3],[163,1],[164,7],[164,8],[164,9],[164,10],[161,6],[161,8],[168,0],[168,3],[166,0],[166,2],[166,2],[166,4],[174,3],[174,1],[160,3],[160,1],[175,2],[175,2],[14,2],[15,3],[16,3],[17,5],[18,3],[182,6],[183,0],[183,2],[184,0],[184,1],[186,3],[186,1],[189,1],[189,1],[189,3],[187,0],[187,3],[188,2],[188,0],[190,1],[190,1],[190,1],[190,1],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[190,3],[19,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

			this.$ = $$[$0-1];
			return this.$;
		
break;
case 2:
 this.$ = $$[$0-2]; if($$[$0]) this.$.push($$[$0]); 
break;
case 3: case 48: case 58: case 68: case 90: case 112: case 144: case 147: case 157: case 175: case 201: case 279: case 295:
 this.$ = [$$[$0]]; 
break;
case 16: case 20: case 22: case 23: case 24: case 25: case 26: case 205: case 207: case 213: case 239: case 240: case 245: case 246: case 300: case 303: case 304:
 this.$ = $$[$0]; 
break;
case 17:
 this.$ = $$[$0].substr(1,$$[$0].length-2); 
break;
case 18:
 this.$ = {database:$$[$0-2], table:$$[$0]}; 
break;
case 19:
 this.$ = {table:$$[$0]}; 
break;
case 21:
 this.$ = {index:$$[$0]}; 
break;
case 27:
 this.$ = {type:'number', number:$$[$0]}; 
break;
case 28:
 this.$ = {type:'string', string: $$[$0]}
break;
case 29: case 39:
 this.$ = true; 
break;
case 30: case 40:
 this.$ = false; 
break;
case 31:
 this.$ = {type:'boolean', value: true }; 
break;
case 32:
 this.$ = {type:'boolean', value: false }; 
break;
case 33: case 34: case 37:
 this.$ = eval($$[$0]); 
break;
case 35: case 36:
 this.$ = { 'S': eval($$[$0]).toString() } 
break;
case 38:
 this.$ = { 'N': eval($$[$0]).toString() } 
break;
case 41:
 this.$ = { 'BOOL': true  } 
break;
case 42:
 this.$ = { 'BOOL': false } 
break;
case 43:
 this.$ = null; 
break;
case 44:
 this.$ = { 'NULL': true } 
break;
case 45:
 this.$ = "\0"; 
break;
case 46:

			if ($$[$0-1].slice(-1) == "\0") {
				this.$ = $$[$0-1].slice(0,-1)
			} else
				this.$ = $$[$0-1];
		
break;
case 47: case 57: case 111:

			this.$ = $$[$0-2] 
			this.$.push($$[$0]); 
		
break;
case 49: case 59:
 this.$ = "\0" 
break;
case 50: case 51: case 52: case 53: case 54: case 55: case 60: case 61: case 62: case 63: case 64: case 65: case 121: case 124: case 127: case 129: case 135: case 136: case 137: case 138: case 226: case 227: case 228: case 229: case 237: case 238:
 this.$ = $$[$0] 
break;
case 56:

			if ($$[$0-1].slice(-1) == "\0") {
				$$[$0-1] = $$[$0-1].slice(0,-1)
			}
			this.$ = { 'L': $$[$0-1] }
		
break;
case 66:
 
			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = $kv
		
break;
case 67: case 89: case 143: case 146: case 156: case 174: case 200: case 264: case 278: case 294:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 69: case 91: case 191: case 197: case 206: case 262: case 290: case 299:
 this.$ = undefined; 
break;
case 70: case 71: case 72: case 73: case 74: case 75: case 76: case 77: case 78: case 79: case 80: case 81: case 82: case 83: case 84: case 85: case 86: case 87: case 92: case 95: case 98: case 101: case 104: case 107:
 this.$ = [$$[$0-2], $$[$0] ] 
break;
case 88:
 
			var $kv = {}
			if ($$[$0-1]) {
				$$[$0-1].map(function(v) {
					if (v)
						$kv[v[0]] = v[1]
				})
			}
			this.$ = { 'M': $kv }
		
break;
case 93: case 94: case 96: case 97: case 99: case 100: case 102: case 103: case 105: case 106: case 108: case 109:
 this.$ = [eval($$[$0-2]), $$[$0] ] 
break;
case 110:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'SS': $$[$0-2] }
		
break;
case 113:

			if ($$[$0-2].slice(-1) == "\0") {
				$$[$0-2] = $$[$0-2].slice(0,-1)
			}
			this.$ = { 'NS': $$[$0-2] }
		
break;
case 114:

			this.$ = $$[$0-2] 
			this.$.push( ($$[$0]).toString() ); 
		
break;
case 115:
 this.$ = [ ($$[$0]).toString() ]; 
break;
case 116:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = date.toString()
			}
			if (typeof date === "string") {
				this.$ = date
			}
			if (typeof date === "number") {
				this.$ = date
			}
		
break;
case 117:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = date.toString()
				}
				if (typeof date === "string") {
					this.$ = date
				}
				if (typeof date === "number") {
					this.$ = date
				}
			} else {
				throw $$[$0-2] + " not a function"
			}
		
break;
case 118:

			var date;
			if ($$[$0-1])
				date = new Date($$[$0-1]);
			else
				date = new Date()

			if (typeof date === "object") {
				this.$ = { S: date.toString() }
			}
			if (typeof date === "string") {
				this.$ = { S: date }
			}
			if (typeof date === "number") {
				this.$ = { N: date.toString() }
			}
		
break;
case 119:

			var date;
			if ($$[$0-5])
				date = new Date($$[$0-5]);
			else
				date = new Date()


			if (typeof date[$$[$0-2]] === "function" ) {
				date = date[$$[$0-2]]();
				if (typeof date === "object") {
					this.$ = { S: date.toString() }
				}
				if (typeof date === "string") {
					this.$ = { S: date }
				}
				if (typeof date === "number") {
					this.$ = { N: date.toString() }
				}
			} else {
				throw $$[$0-2] + " not a function"
			}
		
break;
case 120: case 126:
 this.$ = undefined 
break;
case 122: case 128:

			if (typeof $$[$0] === "object") {
				this.$ = { S: $$[$0].toString() }
			}
			if (typeof $$[$0] === "string") {
				this.$ = { S: $$[$0] }
			}
			if (typeof $$[$0] === "number") {
				this.$ = { N: $$[$0].toString() }
			}
		
break;
case 123:

			if (typeof Math[$$[$0-3]] === "function" ) {
				this.$ = Math[$$[$0-3]]($$[$0-1]);
			} else {
				throw 'Math.' + $$[$0-3] + " not a function"
			}
		
break;
case 125:
 this.$ = 'random' 
break;
case 130: case 145:
 this.$ = $$[$0-1] 
break;
case 131:
 this.$ = $$[$0-2] + $$[$0] 
break;
case 132:
 this.$ = $$[$0-2] - $$[$0] 
break;
case 133:
 this.$ = $$[$0-2] * $$[$0] 
break;
case 134:

			if ($$[$0] === 0 )
				throw 'Division by 0';

			this.$ = $$[$0-2] / $$[$0]
		
break;
case 139:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v[0]] = v[1] })

			this.$ = {
				statement: 'INSERT',
				operation: 'putItem',
				ignore: $$[$0-4],
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv,

				},

			};

		
break;
case 140:

			if ($$[$0].length == 1) {
				this.$ = {
					statement: 'INSERT',
					operation: 'putItem',
					ignore: $$[$0-4],
					dynamodb: {
						TableName: $$[$0-2],
						Item: $$[$0][0].M,
					},

				};
			} else {
				// batch insert
				this.$ = {
					statement: 'BATCHINSERT',
					operation: 'batchWriteItem',
					dynamodb: {
						RequestItems: {}
					}

				}

				var RequestItems = {}

				RequestItems[$$[$0-2]] = []

				$$[$0].map(function(v) {
					RequestItems[$$[$0-2]].push({
						PutRequest: {
							Item: v.M
						}
					})
				})
				this.$.dynamodb.RequestItems = RequestItems;
			}
		
break;
case 141:
 this.$ = false 
break;
case 142:
 this.$ = true 
break;
case 148: case 149: case 150: case 151: case 152: case 153: case 154: case 158: case 159: case 160: case 161: case 162: case 163: case 164: case 176: case 177: case 178: case 179: case 180: case 181: case 182: case 241: case 242:
 this.$ = [ $$[$0-2], $$[$0] ]; 
break;
case 155:


			var Key = {}
			$$[$0].map(function(k) {
				Key[k.k] = k.v
			})
			var Expected = {}
			$$[$0].map(function(k) {
				Expected[k.k] = {
					ComparisonOperator: 'EQ',
					Value: k.v,

				}
			})

			var AttributeUpdates = {}
			$$[$0-2].map(function(k) {
				var Value = k[1]
				var Action = 'PUT' // default

				if (k[2] === '+=')
					Action = 'ADD'

				if (k[2] === 'delete') {
					Action = 'DELETE'

				}

				AttributeUpdates[k[0]] = {
					Action: Action,
					Value: Value,
				}
			})

			this.$ = {
				statement: 'UPDATE',
				operation: 'updateItem',
				dynamodb: {
					TableName: $$[$0-4],
					Key: Key,
					Expected: Expected,
					AttributeUpdates: AttributeUpdates,
				},
			}
		
break;
case 165:
 this.$ = [ $$[$0-2], $$[$0], '+=' ]; 
break;
case 166:
 this.$ = [ $$[$0-2], undefined, 'delete' ]; 
break;
case 167: case 184: case 265: case 281:
 this.$ = [ $$[$0] ]; 
break;
case 168: case 185:
 this.$ = [$$[$0-2], $$[$0]]; 
break;
case 169: case 170: case 171: case 172: case 186: case 187: case 188: case 189:
 this.$ = {k: $$[$0-2], v: $$[$0] }; 
break;
case 173:

			var $kv = {}
			$$[$0].map(function(v) {
				$kv[v[0]] = v[1]
			})
			this.$ = {
				statement: 'REPLACE',
				operation: 'putItem',
				dynamodb: {
					TableName: $$[$0-2],
					Item: $kv
				},
			}
		
break;
case 183:

			var $kv = {}
			$$[$0].map(function(v) { $kv[v.k] = v.v })

			this.$ = {
				statement: 'DELETE',
				operation: 'deleteItem',
				dynamodb: {
					TableName: $$[$0-2],
					Key: $kv,
				}
			}
		
break;
case 190:

			this.$ = {
				statement: 'SELECT',
				operation: 'query',
				dynamodb: $$[$0-3].dynamodb,
			};
			yy.extend(this.$.dynamodb,$$[$0-2]);
			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);
		
break;
case 192:
 this.$ = { Limit: $$[$0] }; 
break;
case 193:
 this.$ = { ScanIndexForward: true }; 
break;
case 194:
 this.$ = { ScanIndexForward: false }; 
break;
case 195: case 292:
 this.$ = { ConsistentRead: false }; 
break;
case 196:
 this.$ = { ConsistentRead: true }; 
break;
case 198:
 this.$ = {distinct:true}; 
break;
case 199:
 this.$ = {all:true}; 
break;
case 202: case 296:
 this.$ = {type: 'star', star:true}; 
break;
case 203: case 297:
 this.$ = {type: 'column', column: $$[$0]}; 
break;
case 204: case 298:
 this.$ = {type: 'column', column: $$[$0-2], alias: $$[$0] }; 
break;
case 208:

			this.$ = {
				//KeyConditionExpression: $$[$0],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '

		
break;
case 209:

			this.$ = {
				//KeyConditionExpression: $$[$0-2],
				ExpressionAttributeNames: {},
				ExpressionAttributeValues: {},
			};

			this.$.ExpressionAttributeNames[ '#partitionKeyName' ] = $$[$0-2].partition.partitionKeyName
			this.$.ExpressionAttributeValues[ ':partitionKeyValue' ] = $$[$0-2].partition.partitionKeyValue
			this.$.KeyConditionExpression = ' #partitionKeyName =  :partitionKeyValue '


			if ($$[$0].sort) {
				this.$.ExpressionAttributeNames[ '#sortKeyName' ] = $$[$0].sort.sortKeyName

				switch ($$[$0].sort.op) {
					case '=':
					case '>':
					case '>=':
					case '<':
					case '<=':
						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND #sortKeyName ' + $$[$0].sort.op + ' :sortKeyValue '

						break;
					case 'BETWEEN':
						this.$.ExpressionAttributeValues[ ':sortKeyValue1' ] = $$[$0].sort.sortKeyValue1
						this.$.ExpressionAttributeValues[ ':sortKeyValue2' ] = $$[$0].sort.sortKeyValue2
						this.$.KeyConditionExpression += ' AND #sortKeyName BETWEEN :sortKeyValue1 AND :sortKeyValue2'
						break;
					case 'BEGINS_WITH':

						if ($$[$0].sort.sortKeyValue.S.slice(-1) !== '%' )
							throw "LIKE '%string' must end with a % for sort key "


						$$[$0].sort.sortKeyValue.S = $$[$0].sort.sortKeyValue.S.slice(0,-1)

						this.$.ExpressionAttributeValues[ ':sortKeyValue' ] = $$[$0].sort.sortKeyValue
						this.$.KeyConditionExpression += ' AND begins_with ( #sortKeyName, :sortKeyValue ) '

						break;
				}

			}


		
break;
case 210: case 301:
 this.$ = {having: $$[$0]}; 
break;
case 212:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-3],
					IndexName: $$[$0-2],
				},
				columns:$$[$0-4]
			};
			yy.extend(this.$.dynamodb,$$[$0-5]);
			yy.extend(this.$.dynamodb,$$[$0-1]);
			yy.extend(this.$.dynamodb,$$[$0]);

			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_')
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}

				})

				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);

				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')

			}


		
break;
case 214: case 247: case 305:
 this.$ = {bind_parameter: $$[$0]}; 
break;
case 215: case 248: case 306:
 this.$ = {column: $$[$0]}; 
break;
case 216: case 249: case 307:
 this.$ = {op: 'AND', left: $$[$0-2], right: $$[$0]}; 
break;
case 217: case 250: case 308:
 this.$ = {op: 'OR', left: $$[$0-2], right: $$[$0]}; 
break;
case 218: case 251: case 309:
 this.$ = {op: '=', left: $$[$0-2], right: $$[$0]}; 
break;
case 219: case 252: case 310:
 this.$ = {op: '>', left: $$[$0-2], right: $$[$0]}; 
break;
case 220: case 253: case 311:
 this.$ = {op: '>=', left: $$[$0-2], right: $$[$0]}; 
break;
case 221: case 254: case 312:
 this.$ = {op: '<', left: $$[$0-2], right: $$[$0]}; 
break;
case 222: case 255: case 313:
 this.$ = {op: '<=', left: $$[$0-2], right: $$[$0]}; 
break;
case 223: case 256: case 314:
 this.$ = {op: 'BETWEEN', left: $$[$0-2], right:$$[$0] }; 
break;
case 224: case 257: case 315:
 this.$ = {op: 'LIKE', left:$$[$0-2], right: { type: 'string', string: $$[$0] } }; 
break;
case 225:

			this.$ = {
				partition: {
					partitionKeyName: $$[$0-2],
					partitionKeyValue: $$[$0]
				}
			}
		
break;
case 230:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '='
				}
			}
		
break;
case 231:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>'
				}
			}
		
break;
case 232:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '>='
				}
			}
		
break;
case 233:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<'
				}
			}
		
break;
case 234:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: '<='
				}
			}
		
break;
case 235:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue1: $$[$0][0],
					sortKeyValue2: $$[$0][1],
					op: 'BETWEEN'
				}
			}
		
break;
case 236:

			this.$ = {
				sort: {
					sortKeyName: $$[$0-2],
					sortKeyValue: $$[$0],
					op: 'BEGINS_WITH'
				}
			}
		
break;
case 243:
 this.$ = {left: { type: 'number', number: $$[$0-2]}, right: {type: 'number', number: $$[$0] } }; 
break;
case 244:
 this.$ = {left: { type: 'string', string: $$[$0-2]}, right: {type: 'string', string: $$[$0] } }; 
break;
case 258: case 316:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'string', string: $$[$0] } }; 
break;
case 259: case 317:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'number', number: $$[$0] } }; 
break;
case 260: case 318:
 this.$ = {op: 'CONTAINS', left:$$[$0-2], right: { type: 'boolean', value: $$[$0] } }; 
break;
case 261:

			this.$ = {
				statement: 'CREATE_TABLE',
				operation: 'createTable',
				dynamodb: {
					TableName: $$[$0-6],
					AttributeDefinitions: $$[$0-4],
				}
				
			};
			yy.extend(this.$.dynamodb,$$[$0-2]); // extend with pk
			yy.extend(this.$.dynamodb,$$[$0-1]); // extend with indexes
		
break;
case 263:

			var indexes = {
				LocalSecondaryIndexes: [],
				GlobalSecondaryIndexes: []
			}
			
			$$[$0].map(function(idx) {
				if (idx.hasOwnProperty('LSI'))
					indexes.LocalSecondaryIndexes.push(idx.LSI)
				if (idx.hasOwnProperty('GSI'))
					indexes.GlobalSecondaryIndexes.push(idx.GSI)
			})
			this.$ = indexes
		
break;
case 266:

			this.$ = {}
			this.$[$$[$0-4]] = { 
				IndexName: $$[$0-5], 
				KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' } ], 
				Projection: $$[$0],
			}
		
break;
case 267:

			this.$ = {}
			this.$[$$[$0-5]] = { 
				IndexName: $$[$0-6], 
				KeySchema: [ { AttributeName: $$[$0-3], KeyType: 'HASH' } ], 
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0] 
			}
		
break;
case 268:

			this.$ = {}
			this.$[$$[$0-6]] = { 
				IndexName: $$[$0-7], 
				KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' }, { AttributeName: $$[$0-2], KeyType: 'RANGE' } ], 
				Projection: $$[$0],
			}
		
break;
case 269:

			this.$ = {}
			this.$[$$[$0-7]] = { 
				IndexName: $$[$0-8], 
				KeySchema: [ { AttributeName: $$[$0-5], KeyType: 'HASH' }, { AttributeName: $$[$0-3], KeyType: 'RANGE' } ], 
				Projection: $$[$0-1],
				ProvisionedThroughput: $$[$0] 
			}
		
break;
case 270:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-2], KeyType: 'HASH' }], ProvisionedThroughput: $$[$0] }  
break;
case 271:
 this.$ = { KeySchema: [ { AttributeName: $$[$0-4], KeyType: 'HASH' } , { AttributeName: $$[$0-2], KeyType: 'RANGE' } ], ProvisionedThroughput: $$[$0] }  
break;
case 272:
 this.$ = { ReadCapacityUnits: 1, WriteCapacityUnits: 1 }; 
break;
case 273:
 this.$ = { ReadCapacityUnits: eval($$[$0-1]), WriteCapacityUnits: eval($$[$0]) } 
break;
case 274: case 275:
 this.$ = { ProjectionType: 'ALL' }; 
break;
case 276:
 this.$ = { ProjectionType: 'KEYS_ONLY' } 
break;
case 277:
 this.$ = { ProjectionType: 'INCLUDE', NonKeyAttributes: $$[$0-1] } 
break;
case 280:
 this.$ = $$[$0-2]; this.$.push($$[$0]) 
break;
case 282:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'S'}; 
break;
case 283:
 this.$ = { AttributeName: $$[$0-1], AttributeType: 'N'}; 
break;
case 284:

			this.$ = {
				statement: 'SHOW_TABLES',
				operation: 'listTables',
				dynamodb: {}
			}
		
break;
case 285:

			this.$ = {
				statement: 'DROP_TABLE',
				operation: 'deleteTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};
		
break;
case 286:

			this.$ = {
				statement: 'DESCRIBE_TABLE',
				operation: 'describeTable',
				dynamodb: {
					TableName: $$[$0]
				}
			};
		
break;
case 287:

			this.$ = {
				statement: 'DROP_INDEX',
				operation: 'updateTable',
				dynamodb: {
					TableName: $$[$0],
					GlobalSecondaryIndexUpdates: [
						{
							Delete: {
								IndexName: $$[$0-2]
							}
						}
					]
				}
			};
		
break;
case 288:

			this.$ = {
				statement: 'SCAN', 
				operation: 'scan',
				dynamodb: $$[$0-2].dynamodb,
			};

			this.$.columns = $$[$0-2].columns
			this.$.having  = Object.keys($$[$0-2].having).length ? $$[$0-2].having : undefined;
			
			yy.extend(this.$.dynamodb, $$[$0-1]);
			yy.extend(this.$.dynamodb, $$[$0]);
		
break;
case 289:

			this.$ = {
				dynamodb: {
					TableName: $$[$0-2],
					IndexName: $$[$0-1],
				},
				columns:$$[$0-4],
				having: {},
			}; 
			yy.extend(this.$,$$[$0]); // filter


			// if we have star, then the rest does not matter
			if (this.$.columns.filter(function(c) { return c.type === 'star'}).length === 0) {
				if (!this.$.dynamodb.hasOwnProperty('ExpressionAttributeNames'))
					this.$.dynamodb.ExpressionAttributeNames = {}

				var ExpressionAttributeNames_from_projection = { }
				var ProjectionExpression = []
				this.$.columns.map(function(c) {
					if (c.type === "column") {
						var replaced_name = '#projection_' + c.column.split('-').join('_minus_').split('.').join('_dot_') 
						ExpressionAttributeNames_from_projection[replaced_name] = c.column;
						ProjectionExpression.push(replaced_name)
					}	
				})
				
				yy.extend(this.$.dynamodb.ExpressionAttributeNames,ExpressionAttributeNames_from_projection);
				
				if (ProjectionExpression.length)
					this.$.dynamodb.ProjectionExpression = ProjectionExpression.join(' , ')
			
			}


		
break;
case 291:
 this.$ = {Limit: $$[$0]}; 
break;
case 293:
 this.$ = { ConsistentRead: true  }; 
break;
case 319:

			this.$ = $$[$0]
		
break;
}
},
table: [{3:1,4:2,7:3,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,94:$V0,105:$V1,113:$V2,116:$V3,120:16,143:$V4,158:$V5,177:$V6,179:$V7,180:$V8,182:25,185:$V9,191:$Va},{1:[3]},{5:[1,29],6:[1,30]},o($Vb,[2,3]),o($Vb,[2,4]),o($Vb,[2,5]),o($Vb,[2,6]),o($Vb,[2,7]),o($Vb,[2,8]),o($Vb,[2,9]),o($Vb,[2,10]),o($Vb,[2,11]),o($Vb,[2,12]),o($Vb,[2,13]),o($Vb,[2,14]),o($Vb,[2,15]),o($Vc,[2,193],{121:31,125:[1,32]}),{95:33,96:[2,141],101:[1,34]},{20:36,21:$Vd,22:$Ve,25:35},{96:[1,39]},{117:[1,40]},{159:[1,41]},{178:[1,42]},{136:[1,44],159:[1,43]},{159:[1,45]},o($Vf,[2,290],{183:46,124:[1,47]}),{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:49,83:53,84:$Vl,88:48,89:50},o($Vm,[2,197],{127:61,128:[1,62],129:[1,63]}),{20:67,21:$Vd,22:$Ve,92:$Vn,186:64,189:65},{1:[2,1]},{7:68,8:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:13,18:14,19:15,94:$V0,105:$V1,113:$V2,116:$V3,120:16,143:$V4,158:$V5,177:$V6,179:$V7,180:$V8,182:25,185:$V9,191:$Va},o($Vf,[2,191],{122:69,124:[1,70]}),o($Vc,[2,194]),{96:[1,71]},{96:[2,142]},{97:[1,72]},o([5,6,71,97,99,107,124,126,135,141],[2,20]),o($Vo,[2,16]),o($Vo,[2,17]),{20:36,21:$Vd,22:$Ve,25:73},{20:36,21:$Vd,22:$Ve,25:74},{20:36,21:$Vd,22:$Ve,25:75},o($Vb,[2,284]),{20:36,21:$Vd,22:$Ve,25:76},{20:78,21:$Vd,22:$Ve,27:77},{20:36,21:$Vd,22:$Ve,25:79},o($Vb,[2,292],{184:80,126:[1,81]}),{28:82,29:$Vp},o($Vb,[2,319]),o($Vq,[2,128],{90:$Vr,91:$Vs,92:$Vt,93:$Vu}),o($Vv,[2,129]),{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:88,83:53,84:$Vl,89:50},o($Vv,[2,135]),o($Vv,[2,136]),o($Vv,[2,137]),o($Vv,[2,138]),{78:$Vw},{24:[1,90]},o($Vx,[2,37]),o($Vx,[2,33]),o($Vx,[2,34]),{20:94,21:$Vd,22:$Ve,92:$Vy,130:91,131:92},o($Vm,[2,198]),o($Vm,[2,199]),{54:[1,96],117:[1,95]},o($Vz,[2,295]),o($Vz,[2,296]),o($Vz,[2,297],{132:[1,97]}),o($Vb,[2,2]),o($Vb,[2,195],{123:98,126:[1,99]}),{28:100,29:$Vp},{20:36,21:$Vd,22:$Ve,25:101},{20:104,21:$Vd,22:$Ve,106:102,109:103},{97:[1,105]},{107:[1,106]},{71:[1,107]},o($Vb,[2,285]),{181:[1,108]},{181:[2,22]},o($Vb,[2,286]),o($Vb,[2,288]),o($Vb,[2,293]),o($Vf,[2,291]),o([5,6,29,54,73,104,112,124,125,126,146,147,148,149,150,151,153,157],[2,23]),{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:109,83:53,84:$Vl,89:50},{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:110,83:53,84:$Vl,89:50},{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:111,83:53,84:$Vl,89:50},{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,77:52,81:112,83:53,84:$Vl,89:50},{73:[1,113],90:$Vr,91:$Vs,92:$Vt,93:$Vu},{71:[1,114]},{21:[1,116],85:115,87:[1,117]},{54:[1,119],117:[1,120],133:118},o($Vz,[2,201]),o($Vz,[2,202]),o($Vz,[2,203],{132:[1,121]}),{20:36,21:$Vd,22:$Ve,25:122},{20:67,21:$Vd,22:$Ve,92:$Vn,189:123},{20:124,21:$Vd,22:$Ve},o($Vb,[2,190]),o($Vb,[2,196]),o($Vf,[2,192]),{97:[1,125],99:[1,126]},{54:[1,128],107:[1,127]},o($VA,[2,157]),{104:[1,129],110:[1,130]},{20:133,21:$Vd,22:$Ve,114:131,115:132},{20:136,21:$Vd,22:$Ve,118:134,119:135},{20:139,21:$Vd,22:$Ve,160:137,175:138},{20:36,21:$Vd,22:$Ve,25:140},o($VB,[2,131],{92:$Vt,93:$Vu}),o($VB,[2,132],{92:$Vt,93:$Vu}),o($Vv,[2,133]),o($Vv,[2,134]),o($Vv,[2,130]),{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,73:$VC,77:52,79:141,81:142,83:53,84:$Vl,89:50},{71:[1,143]},{71:[2,124]},{71:[2,125]},{107:[2,206],134:144,135:[1,145]},{20:94,21:$Vd,22:$Ve,92:$Vy,131:146},{20:36,21:$Vd,22:$Ve,25:147},{20:148,21:$Vd,22:$Ve},o($VD,[2,299],{187:149,135:[1,150]}),o($Vz,[2,294]),o($Vz,[2,298]),{20:153,21:$Vd,22:$Ve,98:151,103:152},{71:$VE,100:154,102:155},{20:159,21:$Vd,22:$Ve,108:157,111:158},{20:104,21:$Vd,22:$Ve,109:160},{29:$Vg,31:$Vh,32:$Vi,36:$VF,37:$VG,39:55,41:54,44:162,46:$VH,47:163,48:168,49:[1,175],51:$VI,57:165,60:164,61:$VJ,68:166,69:$VK,71:$Vk,74:167,77:52,81:49,83:53,84:$Vl,88:161,89:50},{29:$VL,42:176},o($Vb,[2,173],{54:[1,178]}),o($VM,[2,175]),{104:[1,179]},o($Vb,[2,183]),o($Vb,[2,184],{112:[1,180]}),{104:[1,181]},{54:[1,182]},{54:[2,281]},{29:[1,184],176:[1,183]},o($Vb,[2,287]),{73:[1,185]},{73:[2,121],90:$Vr,91:$Vs,92:$Vt,93:$Vu},{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,73:[2,126],77:52,81:187,83:53,84:$Vl,86:186,89:50},{107:[1,189],137:188},{136:[1,190]},o($Vz,[2,200]),o([107,135],[2,205]),o($Vz,[2,204]),o($Vc,[2,302],{188:191,141:[1,192]}),{136:[1,193]},o($Vb,[2,139],{54:[1,194]}),o($VM,[2,147]),{104:[1,195]},o($Vb,[2,140],{54:[1,196]}),o($VM,[2,144]),{60:197,61:$VJ},o($Vb,[2,155]),o($Vb,[2,167],{112:[1,198]}),{104:[1,199]},o($VA,[2,156]),o($VA,[2,158]),o($VA,[2,159]),o($VA,[2,160]),o($VA,[2,161]),o($VA,[2,162]),o($VA,[2,163]),o($VA,[2,164]),o($VA,[2,166]),o($VN,[2,41]),o($VN,[2,42]),o($VN,[2,44]),o($VO,$VP,{66:200,67:201,20:202,21:$Vd,22:$Ve,31:$VQ,32:$VR}),o($VS,$VT,{58:205,59:206,42:207,40:208,44:209,47:210,57:211,60:212,29:$VL,31:$VU,32:$VV,36:$VF,37:$VG,46:$VH,51:$VI,61:$VJ}),{70:[1,215],75:[1,216],78:$Vw},o($VA,[2,45]),o($VA,[2,165]),o([5,6,53,54,63,107,112,124,125,126,141],[2,38]),{20:133,21:$Vd,22:$Ve,115:217},{29:$Vg,31:$Vh,32:$Vi,36:$VF,37:$VG,39:55,41:54,44:219,46:$VH,47:220,51:$VI,57:222,60:221,61:$VJ,68:223,69:$VK,71:$Vk,74:224,77:52,81:49,83:53,84:$Vl,88:218,89:50},{20:136,21:$Vd,22:$Ve,119:225},{29:$VL,31:$VU,32:$VV,40:226,42:227,69:$VW,80:228,82:229,83:231,84:$Vl},{20:139,21:$Vd,22:$Ve,161:232,169:[1,234],175:233},{54:[2,282]},{54:[2,283]},o($Vv,[2,116],{24:[1,235]}),{73:[1,236]},{73:[2,127],90:$Vr,91:$Vs,92:$Vt,93:$Vu},o($VX,[2,211],{140:237,141:[1,238]}),{20:240,21:$Vd,22:$Ve,138:239},{20:241,21:$Vd,22:$Ve},o($Vc,[2,289]),{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:242},{20:254,21:$Vd,22:$Ve},{20:153,21:$Vd,22:$Ve,103:255},{29:$Vg,31:$Vh,32:$Vi,36:$VF,37:$VG,39:55,41:54,44:257,46:$VH,47:258,51:$VI,57:260,60:259,61:$VJ,68:261,69:$VK,71:$Vk,74:262,77:52,81:49,83:53,84:$Vl,88:256,89:50},{71:$VE,102:263},{73:[1,264]},{20:159,21:$Vd,22:$Ve,111:265},{29:$VL,31:$VU,32:$VV,40:266,42:267,69:$VW,80:268,82:269,83:231,84:$Vl},{54:[1,271],63:[1,270]},o($VO,[2,90]),{65:[1,272]},{65:[1,273]},{65:[1,274]},{53:[1,275],54:[1,276]},o($VS,[2,58]),o($VS,[2,60]),o($VS,[2,61]),o($VS,[2,62]),o($VS,[2,63]),o($VS,[2,64]),o($VS,[2,65]),o($V21,[2,35]),o($V21,[2,36]),{71:[1,277]},{71:[1,278]},o($VM,[2,174]),o($VM,[2,176]),o($VM,[2,177]),o($VM,[2,178]),o($VM,[2,179]),o($VM,[2,180]),o($VM,[2,181]),o($VM,[2,182]),o($Vb,[2,185]),o($V31,[2,186]),o($V31,[2,187]),o($V31,[2,188]),o($V31,[2,189]),{78:[1,279]},o($V41,[2,122]),{54:[1,281],73:[2,262],162:280},{54:[2,280]},{170:[1,282]},{21:[1,283]},o([5,6,54,73,90,91,92,93,107,112,124,125,126,141],[2,123]),o($VX,[2,212]),{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:284,145:$V51},o($V61,[2,208],{112:[1,289]}),{104:[1,290]},{107:[2,207]},o($Vc,[2,301],{104:$V71,112:$V81,146:[1,292],147:$V91,148:$Va1,149:$Vb1,150:$Vc1,151:$Vd1,153:$Ve1,157:$Vf1}),o($Vg1,[2,303]),o($Vg1,[2,304]),o($Vg1,[2,305]),o($Vg1,[2,306]),o($Vh1,[2,27]),o($Vh1,[2,28]),o($Vh1,[2,31]),o($Vh1,[2,32]),o($Vh1,[2,24]),o($Vh1,[2,25]),o($Vh1,[2,26]),o($VD,[2,300]),o($VM,[2,146]),o($VM,[2,148]),o($VM,[2,149]),o($VM,[2,150]),o($VM,[2,151]),o($VM,[2,152]),o($VM,[2,153]),o($VM,[2,154]),o($VM,[2,143]),o($VM,[2,145]),o($Vb,[2,168]),o($V31,[2,169]),o($V31,[2,170]),o($V31,[2,171]),o($V31,[2,172]),o([5,6,53,54,63,73,107],[2,88]),o($VO,$VP,{20:202,67:301,21:$Vd,22:$Ve,31:$VQ,32:$VR}),{29:$VL,31:$VU,32:$VV,36:$VF,37:$VG,40:303,42:302,44:304,46:$VH,47:305,51:$VI,57:306,60:307,61:$VJ},{29:$VL,31:$VU,32:$VV,36:$VF,37:$VG,40:309,42:308,44:310,46:$VH,47:311,51:$VI,57:312,60:313,61:$VJ},{29:$VL,31:$VU,32:$VV,36:$VF,37:$VG,40:315,42:314,44:316,46:$VH,47:317,51:$VI,57:318,60:319,61:$VJ},o($VN,[2,56]),o($VS,$VT,{42:207,40:208,44:209,47:210,57:211,60:212,59:320,29:$VL,31:$VU,32:$VV,36:$VF,37:$VG,46:$VH,51:$VI,61:$VJ}),{51:[1,321]},{51:[1,322]},{71:[1,323]},{73:[1,324]},{136:$Vi1,163:325,164:326},{71:[1,328]},{71:[1,329]},o($VX,[2,210],{104:$Vj1,112:$Vk1,146:[1,331],147:$Vl1,148:$Vm1,149:$Vn1,150:$Vo1,151:$Vp1,153:$Vq1,157:$Vr1}),o($Vh1,[2,245]),o($Vh1,[2,246]),o($Vh1,[2,247]),o($Vh1,[2,248]),{20:341,21:$Vd,22:$Ve,139:340},{29:$VL,31:$VU,32:$VV,40:344,42:343,69:$VW,80:345,82:346,83:231,84:$Vl,154:342},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:347},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:348},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:349},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:350},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:351},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:352},{20:246,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:243,36:$V$,37:$V01,38:244,145:$V11,190:353},{28:355,29:$Vp,30:356,31:$VY,32:$VZ,33:$V_,152:354},{30:357,31:$VY,32:$VZ,33:$V_},{28:359,29:$Vp,30:358,31:$VY,32:$VZ,33:$V_,36:$V$,37:$V01,38:360},o($VO,[2,89]),o($VO,[2,92]),o($VO,[2,95]),o($VO,[2,98]),o($VO,[2,101]),o($VO,[2,104]),o($VO,[2,107]),o($VO,[2,93]),o($VO,[2,96]),o($VO,[2,99]),o($VO,[2,102]),o($VO,[2,105]),o($VO,[2,108]),o($VO,[2,94]),o($VO,[2,97]),o($VO,[2,100]),o($VO,[2,103]),o($VO,[2,106]),o($VO,[2,109]),o($VS,[2,57]),{31:$Vh,32:$Vi,39:362,72:361},{29:$Vg,41:364,76:363},{29:$Vg,31:$Vh,32:$Vi,39:55,41:54,69:$Vj,71:$Vk,73:$VC,77:52,79:365,81:142,83:53,84:$Vl,89:50},o($Vb,[2,261]),{54:[1,366],73:[2,263]},o($Vs1,[2,265]),{20:367,21:$Vd,22:$Ve},{20:368,21:$Vd,22:$Ve},{73:[1,369]},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:370,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:371,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:372,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:373,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:374,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:375,145:$V51},{20:288,21:$Vd,22:$Ve,28:247,29:$Vp,30:248,31:$VY,32:$VZ,33:$V_,34:285,36:$V$,37:$V01,38:286,142:376,145:$V51},{28:355,29:$Vp,30:356,31:$VY,32:$VZ,33:$V_,152:377},{30:378,31:$VY,32:$VZ,33:$V_},{28:380,29:$Vp,30:379,31:$VY,32:$VZ,33:$V_,36:$V$,37:$V01,38:381},o($V61,[2,209]),{104:[1,382],147:[1,383],148:[1,384],149:[1,385],150:[1,386],151:[1,387],153:[1,388]},o($V41,[2,225]),o($V41,[2,226]),o($V41,[2,227]),o($V41,[2,228]),o($V41,[2,229]),o([5,6,112,124,126,146],[2,307],{104:$V71,147:$V91,148:$Va1,149:$Vb1,150:$Vc1,151:$Vd1,153:$Ve1,157:$Vf1}),o([5,6,124,126,146],[2,308],{104:$V71,112:$V81,147:$V91,148:$Va1,149:$Vb1,150:$Vc1,151:$Vd1,153:$Ve1,157:$Vf1}),o([5,6,104,112,124,126,146,151,153,157],[2,309],{147:$V91,148:$Va1,149:$Vb1,150:$Vc1}),o($Vg1,[2,310]),o($Vg1,[2,311]),o($Vg1,[2,312]),o($Vg1,[2,313]),o($Vg1,[2,314]),{112:[1,389]},{112:[1,390]},o($Vg1,[2,315]),o($Vg1,[2,316]),o($Vg1,[2,317]),o($Vg1,[2,318]),{53:[1,391],54:[1,392]},o($VS,[2,112]),{53:[1,393],54:[1,394]},o($VS,[2,115]),{73:[1,395]},{136:$Vi1,164:396},{165:[1,397],167:[1,398]},{54:[1,400],73:[1,399]},o($Vv,[2,117]),o([5,6,112,124,125,126,146],[2,249],{104:$Vj1,147:$Vl1,148:$Vm1,149:$Vn1,150:$Vo1,151:$Vp1,153:$Vq1,157:$Vr1}),o([5,6,124,125,126,146],[2,250],{104:$Vj1,112:$Vk1,147:$Vl1,148:$Vm1,149:$Vn1,150:$Vo1,151:$Vp1,153:$Vq1,157:$Vr1}),o([5,6,104,112,124,125,126,146,151,153,157],[2,251],{147:$Vl1,148:$Vm1,149:$Vn1,150:$Vo1}),o($Vh1,[2,252]),o($Vh1,[2,253]),o($Vh1,[2,254]),o($Vh1,[2,255]),o($Vh1,[2,256]),o($Vh1,[2,257]),o($Vh1,[2,258]),o($Vh1,[2,259]),o($Vh1,[2,260]),{29:$VL,31:$VU,32:$VV,40:403,42:402,69:$VW,80:404,82:405,83:231,84:$Vl,155:401},{29:$VL,31:$VU,32:$VV,40:403,42:402,69:$VW,80:404,82:405,83:231,84:$Vl,155:406},{29:$VL,31:$VU,32:$VV,40:403,42:402,69:$VW,80:404,82:405,83:231,84:$Vl,155:407},{29:$VL,31:$VU,32:$VV,40:403,42:402,69:$VW,80:404,82:405,83:231,84:$Vl,155:408},{29:$VL,31:$VU,32:$VV,40:403,42:402,69:$VW,80:404,82:405,83:231,84:$Vl,155:409},{29:$VL,31:$VU,32:$VV,40:412,42:411,156:410},{31:$VU,32:$VV,40:413},{28:414,29:$Vp},{30:415,31:$VY,32:$VZ,33:$V_},{73:[1,416]},{31:$Vh,32:$Vi,39:417},{73:[1,418]},{29:$Vg,41:419},o($V41,[2,118],{24:[1,420]}),o($Vs1,[2,264]),{71:[1,421]},{71:[1,422]},o($Vs1,$Vt1,{168:423,171:$Vu1}),{20:425,21:$Vd,22:$Ve},o($V61,[2,230]),o($V61,[2,237]),o($V61,[2,238]),o($V61,[2,239]),o($V61,[2,240]),o($V61,[2,231]),o($V61,[2,232]),o($V61,[2,233]),o($V61,[2,234]),o($V61,[2,235]),{112:[1,426]},{112:[1,427]},o($V61,[2,236]),o($Vh1,[2,243]),o($Vh1,[2,244]),o($Vq,[2,110]),o($VS,[2,111]),o($Vq,[2,113]),o($VS,[2,114]),{21:[1,428]},{20:429,21:$Vd,22:$Ve},{20:430,21:$Vd,22:$Ve},o($Vs1,[2,270]),{28:431,29:$Vp},{73:[1,432]},{29:$VL,42:433},{31:$VU,32:$VV,40:434},{71:[1,435]},{54:[1,437],73:[1,436]},{54:[1,439],73:[1,438]},{28:440,29:$Vp},o($Vs1,$Vt1,{168:441,171:$Vu1}),o($V61,[2,241]),o($V61,[2,242]),{73:[1,442]},o($Vs1,$Vv1,{166:443,172:$Vw1}),{20:445,21:$Vd,22:$Ve},o($Vx1,$Vv1,{166:446,172:$Vw1}),{20:447,21:$Vd,22:$Ve},o($Vs1,[2,273]),o($Vs1,[2,271]),o($V41,[2,119]),o($Vs1,[2,266]),{71:[1,450],129:[1,448],173:[1,449]},{73:[1,451]},o($Vs1,$Vt1,{168:452,171:$Vu1}),{73:[1,453]},o($Vx1,[2,275]),o($Vx1,[2,276]),{20:455,21:$Vd,22:$Ve,174:454},o($Vs1,$Vv1,{166:456,172:$Vw1}),o($Vs1,[2,267]),o($Vx1,$Vv1,{166:457,172:$Vw1}),{54:[1,459],73:[1,458]},o($Vs1,[2,279]),o($Vs1,[2,268]),o($Vs1,$Vt1,{168:460,171:$Vu1}),o($Vx1,[2,277]),{20:461,21:$Vd,22:$Ve},o($Vs1,[2,269]),o($Vs1,[2,278])],
defaultActions: {29:[2,1],34:[2,142],78:[2,22],116:[2,124],117:[2,125],138:[2,281],183:[2,282],184:[2,283],233:[2,280],241:[2,207]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 22
break;
case 1:return 31
break;
case 2:return 32
break;
case 3:/* skip -- comments */
break;
case 4:/* skip whitespace */
break;
case 5:return 'ABORT'
break;
case 6:return 'ADD'
break;
case 7:return 'AFTER'
break;
case 8:return 'ALTER'
break;
case 9:return 'ANALYZE'
break;
case 10:return 112
break;
case 11:return 132
break;
case 12:return 'ASC'
break;
case 13:return 'ATTACH'
break;
case 14:return 'BEFORE'
break;
case 15:return 'BEGIN'
break;
case 16:return 151
break;
case 17:return 'BY'
break;
case 18:return 'CASCADE'
break;
case 19:return 'CASE'
break;
case 20:return 'CAST'
break;
case 21:return 'CHECK'
break;
case 22:return 'COLLATE'
break;
case 23:return 'COLUMN'
break;
case 24:return 'CONFLICT'
break;
case 25:return 126
break;
case 26:return 'CONSTRAINT'
break;
case 27:return 158
break;
case 28:return 'CROSS'
break;
case 29:return 'CURRENT DATE'
break;
case 30:return 'CURRENT TIME'
break;
case 31:return 'CURRENT TIMESTAMP'
break;
case 32:return 'DATABASE'
break;
case 33:return 'DEFAULT'
break;
case 34:return 'DEFERRABLE'
break;
case 35:return 'DEFERRED'
break;
case 36:return 116
break;
case 37:return 125
break;
case 38:return 'DETACH'
break;
case 39:return 128
break;
case 40:return 179
break;
case 41:return 180
break;
case 42:return 'EACH'
break;
case 43:return 'ELSE'
break;
case 44:return 'END'
break;
case 45:return 'ESCAPE'
break;
case 46:return 'EXCEPT'
break;
case 47:return 'EXCLUSIVE'
break;
case 48:return 'EXISTS'
break;
case 49:return 'EXPLAIN'
break;
case 50:return 'FAIL'
break;
case 51:return 'FOR'
break;
case 52:return 'FOREIGN'
break;
case 53:return 117
break;
case 54:return 'FULL'
break;
case 55:return 'GLOB'
break;
case 56:return 'GROUP'
break;
case 57:return 141
break;
case 58:return 'IF'
break;
case 59:return 101
break;
case 60:return 'IMMEDIATE'
break;
case 61:return 'IN'
break;
case 62:return 135
break;
case 63:return 136
break;
case 64:return 'INDEXED'
break;
case 65:return 'INITIALLY'
break;
case 66:return 'INNER'
break;
case 67:return 94
break;
case 68:return 'INSTEAD'
break;
case 69:return 'INTERSECT'
break;
case 70:return 96
break;
case 71:return 'IS'
break;
case 72:return 'ISNULL'
break;
case 73:return 'JOIN'
break;
case 74:return 170
break;
case 75:return 'LEFT'
break;
case 76:return 153
break;
case 77:return 157
break;
case 78:return 124
break;
case 79:return 'MATCH'
break;
case 80:return 'NATURAL'
break;
case 81:return 'NO'
break;
case 82:return 'NOT'
break;
case 83:return 'NOTNULL'
break;
case 84:return 46
break;
case 85:return 49
break;
case 86:return 'OF'
break;
case 87:return 'OFFSET'
break;
case 88:return 181
break;
case 89:return 146
break;
case 90:return 'ORDER'
break;
case 91:return 'OUTER'
break;
case 92:return 'PLAN'
break;
case 93:return 'PRAGMA'
break;
case 94:return 169
break;
case 95:return 'QUERY'
break;
case 96:return 'RAISE'
break;
case 97:return 'RECURSIVE'
break;
case 98:return 'REFERENCES'
break;
case 99:return 'REGEXP'
break;
case 100:return 'REINDEX'
break;
case 101:return 'RELEASE'
break;
case 102:return 'RENAME'
break;
case 103:return 113
break;
case 104:return 'RESTRICT'
break;
case 105:return 'RIGHT'
break;
case 106:return 'ROLLBACK'
break;
case 107:return 'ROW'
break;
case 108:return 143
break;
case 109:return 185
break;
case 110:return 97
break;
case 111:return 159
break;
case 112:return 'TEMP'
break;
case 113:return 'THEN'
break;
case 114:return 'TO'
break;
case 115:return 'TRIGGER'
break;
case 116:return 'UNION'
break;
case 117:return 'UNIQUE'
break;
case 118:return 105
break;
case 119:return 'USING'
break;
case 120:return 'VACUUM'
break;
case 121:return 99
break;
case 122:return 'VIEW'
break;
case 123:return 'WHEN'
break;
case 124:return 107
break;
case 125:return 'WITH'
break;
case 126:return 36
break;
case 127:return 37
break;
case 128:return 177
break;
case 129:return 178
break;
case 130:return 176
break;
case 131:return 29
break;
case 132:return 70
break;
case 133:return 75
break;
case 134:return 'BINARYSET'
break;
case 135:return 171
break;
case 136:return 167
break;
case 137:return 165
break;
case 138:return 172
break;
case 139:return 129
break;
case 140:return 173
break;
case 141:return 69
break;
case 142:return 191
break;
case 143:return 'ALLOCATE'
break;
case 144:return 'ALTER'
break;
case 145:return 'ANALYZE'
break;
case 146:return 112
break;
case 147:return 'ANY'
break;
case 148:return 'ARCHIVE'
break;
case 149:return 'ARE'
break;
case 150:return 'ARRAY'
break;
case 151:return 132
break;
case 152:return 'ASC'
break;
case 153:return 'ASCII'
break;
case 154:return 'ASENSITIVE'
break;
case 155:return 'ASSERTION'
break;
case 156:return 'ASYMMETRIC'
break;
case 157:return 'AT'
break;
case 158:return 'ATOMIC'
break;
case 159:return 'ATTACH'
break;
case 160:return 'ATTRIBUTE'
break;
case 161:return 'AUTH'
break;
case 162:return 'AUTHORIZATION'
break;
case 163:return 'AUTHORIZE'
break;
case 164:return 'AUTO'
break;
case 165:return 'AVG'
break;
case 166:return 'BACK'
break;
case 167:return 'BACKUP'
break;
case 168:return 'BASE'
break;
case 169:return 'BATCH'
break;
case 170:return 'BEFORE'
break;
case 171:return 'BEGIN'
break;
case 172:return 151
break;
case 173:return 'BIGINT'
break;
case 174:return 'BINARY'
break;
case 175:return 'BIT'
break;
case 176:return 'BLOB'
break;
case 177:return 'BLOCK'
break;
case 178:return 'BOOLEAN'
break;
case 179:return 'BOTH'
break;
case 180:return 'BREADTH'
break;
case 181:return 'BUCKET'
break;
case 182:return 'BULK'
break;
case 183:return 'BY'
break;
case 184:return 'BYTE'
break;
case 185:return 'CALL'
break;
case 186:return 'CALLED'
break;
case 187:return 'CALLING'
break;
case 188:return 'CAPACITY'
break;
case 189:return 'CASCADE'
break;
case 190:return 'CASCADED'
break;
case 191:return 'CASE'
break;
case 192:return 'CAST'
break;
case 193:return 'CATALOG'
break;
case 194:return 'CHAR'
break;
case 195:return 'CHARACTER'
break;
case 196:return 'CHECK'
break;
case 197:return 'CLASS'
break;
case 198:return 'CLOB'
break;
case 199:return 'CLOSE'
break;
case 200:return 'CLUSTER'
break;
case 201:return 'CLUSTERED'
break;
case 202:return 'CLUSTERING'
break;
case 203:return 'CLUSTERS'
break;
case 204:return 'COALESCE'
break;
case 205:return 'COLLATE'
break;
case 206:return 'COLLATION'
break;
case 207:return 'COLLECTION'
break;
case 208:return 'COLUMN'
break;
case 209:return 'COLUMNS'
break;
case 210:return 'COMBINE'
break;
case 211:return 'COMMENT'
break;
case 212:return 'COMMIT'
break;
case 213:return 'COMPACT'
break;
case 214:return 'COMPILE'
break;
case 215:return 'COMPRESS'
break;
case 216:return 'CONDITION'
break;
case 217:return 'CONFLICT'
break;
case 218:return 'CONNECT'
break;
case 219:return 'CONNECTION'
break;
case 220:return 'CONSISTENCY'
break;
case 221:return 'CONSISTENT'
break;
case 222:return 'CONSTRAINT'
break;
case 223:return 'CONSTRAINTS'
break;
case 224:return 'CONSTRUCTOR'
break;
case 225:return 'CONSUMED'
break;
case 226:return 'CONTINUE'
break;
case 227:return 'CONVERT'
break;
case 228:return 'COPY'
break;
case 229:return 'CORRESPONDING'
break;
case 230:return 'COUNT'
break;
case 231:return 'COUNTER'
break;
case 232:return 158
break;
case 233:return 'CROSS'
break;
case 234:return 'CUBE'
break;
case 235:return 'CURRENT'
break;
case 236:return 'CURSOR'
break;
case 237:return 'CYCLE'
break;
case 238:return 'DATA'
break;
case 239:return 'DATABASE'
break;
case 240:return 78
break;
case 241:return 'DATETIME'
break;
case 242:return 'DAY'
break;
case 243:return 'DEALLOCATE'
break;
case 244:return 'DEC'
break;
case 245:return 'DECIMAL'
break;
case 246:return 'DECLARE'
break;
case 247:return 'DEFAULT'
break;
case 248:return 'DEFERRABLE'
break;
case 249:return 'DEFERRED'
break;
case 250:return 'DEFINE'
break;
case 251:return 'DEFINED'
break;
case 252:return 'DEFINITION'
break;
case 253:return 116
break;
case 254:return 'DELIMITED'
break;
case 255:return 'DEPTH'
break;
case 256:return 'DEREF'
break;
case 257:return 125
break;
case 258:return 180
break;
case 259:return 'DESCRIPTOR'
break;
case 260:return 'DETACH'
break;
case 261:return 'DETERMINISTIC'
break;
case 262:return 'DIAGNOSTICS'
break;
case 263:return 'DIRECTORIES'
break;
case 264:return 'DISABLE'
break;
case 265:return 'DISCONNECT'
break;
case 266:return 128
break;
case 267:return 'DISTRIBUTE'
break;
case 268:return 'DO'
break;
case 269:return 'DOMAIN'
break;
case 270:return 'DOUBLE'
break;
case 271:return 179
break;
case 272:return 'DUMP'
break;
case 273:return 'DURATION'
break;
case 274:return 'DYNAMIC'
break;
case 275:return 'EACH'
break;
case 276:return 'ELEMENT'
break;
case 277:return 'ELSE'
break;
case 278:return 'ELSEIF'
break;
case 279:return 'EMPTY'
break;
case 280:return 'ENABLE'
break;
case 281:return 'END'
break;
case 282:return 'EQUAL'
break;
case 283:return 'EQUALS'
break;
case 284:return 'ERROR'
break;
case 285:return 'ESCAPE'
break;
case 286:return 'ESCAPED'
break;
case 287:return 'EVAL'
break;
case 288:return 'EVALUATE'
break;
case 289:return 'EXCEEDED'
break;
case 290:return 'EXCEPT'
break;
case 291:return 'EXCEPTION'
break;
case 292:return 'EXCEPTIONS'
break;
case 293:return 'EXCLUSIVE'
break;
case 294:return 'EXEC'
break;
case 295:return 'EXECUTE'
break;
case 296:return 'EXISTS'
break;
case 297:return 'EXIT'
break;
case 298:return 'EXPLAIN'
break;
case 299:return 'EXPLODE'
break;
case 300:return 'EXPORT'
break;
case 301:return 'EXPRESSION'
break;
case 302:return 'EXTENDED'
break;
case 303:return 'EXTERNAL'
break;
case 304:return 'EXTRACT'
break;
case 305:return 'FAIL'
break;
case 306:return 37
break;
case 307:return 'FAMILY'
break;
case 308:return 'FETCH'
break;
case 309:return 'FIELDS'
break;
case 310:return 'FILE'
break;
case 311:return 'FILTER'
break;
case 312:return 'FILTERING'
break;
case 313:return 'FINAL'
break;
case 314:return 'FINISH'
break;
case 315:return 'FIRST'
break;
case 316:return 'FIXED'
break;
case 317:return 'FLATTERN'
break;
case 318:return 'FLOAT'
break;
case 319:return 'FOR'
break;
case 320:return 'FORCE'
break;
case 321:return 'FOREIGN'
break;
case 322:return 'FORMAT'
break;
case 323:return 'FORWARD'
break;
case 324:return 'FOUND'
break;
case 325:return 'FREE'
break;
case 326:return 117
break;
case 327:return 'FULL'
break;
case 328:return 'FUNCTION'
break;
case 329:return 'FUNCTIONS'
break;
case 330:return 'GENERAL'
break;
case 331:return 'GENERATE'
break;
case 332:return 'GET'
break;
case 333:return 'GLOB'
break;
case 334:return 'GLOBAL'
break;
case 335:return 'GO'
break;
case 336:return 'GOTO'
break;
case 337:return 'GRANT'
break;
case 338:return 'GREATER'
break;
case 339:return 'GROUP'
break;
case 340:return 'GROUPING'
break;
case 341:return 'HANDLER'
break;
case 342:return 'HASH'
break;
case 343:return 'HAVE'
break;
case 344:return 141
break;
case 345:return 'HEAP'
break;
case 346:return 'HIDDEN'
break;
case 347:return 'HOLD'
break;
case 348:return 'HOUR'
break;
case 349:return 'IDENTIFIED'
break;
case 350:return 'IDENTITY'
break;
case 351:return 'IF'
break;
case 352:return 101
break;
case 353:return 'IMMEDIATE'
break;
case 354:return 'IMPORT'
break;
case 355:return 'IN'
break;
case 356:return 'INCLUDING'
break;
case 357:return 'INCLUSIVE'
break;
case 358:return 'INCREMENT'
break;
case 359:return 'INCREMENTAL'
break;
case 360:return 136
break;
case 361:return 'INDEXED'
break;
case 362:return 'INDEXES'
break;
case 363:return 'INDICATOR'
break;
case 364:return 'INFINITE'
break;
case 365:return 'INITIALLY'
break;
case 366:return 'INLINE'
break;
case 367:return 'INNER'
break;
case 368:return 'INNTER'
break;
case 369:return 'INOUT'
break;
case 370:return 'INPUT'
break;
case 371:return 'INSENSITIVE'
break;
case 372:return 94
break;
case 373:return 'INSTEAD'
break;
case 374:return 'INT'
break;
case 375:return 'INTEGER'
break;
case 376:return 'INTERSECT'
break;
case 377:return 'INTERVAL'
break;
case 378:return 96
break;
case 379:return 'INVALIDATE'
break;
case 380:return 'IS'
break;
case 381:return 'ISOLATION'
break;
case 382:return 'ITEM'
break;
case 383:return 'ITEMS'
break;
case 384:return 'ITERATE'
break;
case 385:return 'JOIN'
break;
case 386:return 170
break;
case 387:return 'KEYS'
break;
case 388:return 'LAG'
break;
case 389:return 'LANGUAGE'
break;
case 390:return 'LARGE'
break;
case 391:return 'LAST'
break;
case 392:return 'LATERAL'
break;
case 393:return 'LEAD'
break;
case 394:return 'LEADING'
break;
case 395:return 'LEAVE'
break;
case 396:return 'LEFT'
break;
case 397:return 'LENGTH'
break;
case 398:return 'LESS'
break;
case 399:return 'LEVEL'
break;
case 400:return 153
break;
case 401:return 124
break;
case 402:return 'LIMITED'
break;
case 403:return 'LINES'
break;
case 404:return 'LIST'
break;
case 405:return 'LOAD'
break;
case 406:return 'LOCAL'
break;
case 407:return 'LOCALTIME'
break;
case 408:return 'LOCALTIMESTAMP'
break;
case 409:return 'LOCATION'
break;
case 410:return 'LOCATOR'
break;
case 411:return 'LOCK'
break;
case 412:return 'LOCKS'
break;
case 413:return 'LOG'
break;
case 414:return 'LOGED'
break;
case 415:return 'LONG'
break;
case 416:return 'LOOP'
break;
case 417:return 'LOWER'
break;
case 418:return 'MAP'
break;
case 419:return 'MATCH'
break;
case 420:return 'MATERIALIZED'
break;
case 421:return 'MAX'
break;
case 422:return 'MAXLEN'
break;
case 423:return 'MEMBER'
break;
case 424:return 'MERGE'
break;
case 425:return 'METHOD'
break;
case 426:return 'METRICS'
break;
case 427:return 'MIN'
break;
case 428:return 91
break;
case 429:return 'MINUTE'
break;
case 430:return 'MISSING'
break;
case 431:return 'MOD'
break;
case 432:return 'MODE'
break;
case 433:return 'MODIFIES'
break;
case 434:return 'MODIFY'
break;
case 435:return 'MODULE'
break;
case 436:return 'MONTH'
break;
case 437:return 'MULTI'
break;
case 438:return 'MULTISET'
break;
case 439:return 'NAME'
break;
case 440:return 'NAMES'
break;
case 441:return 'NATIONAL'
break;
case 442:return 'NATURAL'
break;
case 443:return 'NCHAR'
break;
case 444:return 'NCLOB'
break;
case 445:return 69
break;
case 446:return 'NEXT'
break;
case 447:return 'NO'
break;
case 448:return 'NONE'
break;
case 449:return 'NOT'
break;
case 450:return 46
break;
case 451:return 'NULLIF'
break;
case 452:return 29
break;
case 453:return 'NUMERIC'
break;
case 454:return 'OBJECT'
break;
case 455:return 'OF'
break;
case 456:return 'OFFLINE'
break;
case 457:return 'OFFSET'
break;
case 458:return 'OLD'
break;
case 459:return 181
break;
case 460:return 'ONLINE'
break;
case 461:return 'ONLY'
break;
case 462:return 'OPAQUE'
break;
case 463:return 'OPEN'
break;
case 464:return 'OPERATOR'
break;
case 465:return 'OPTION'
break;
case 466:return 146
break;
case 467:return 'ORDER'
break;
case 468:return 'ORDINALITY'
break;
case 469:return 'OTHER'
break;
case 470:return 'OTHERS'
break;
case 471:return 'OUT'
break;
case 472:return 'OUTER'
break;
case 473:return 'OUTPUT'
break;
case 474:return 'OVER'
break;
case 475:return 'OVERLAPS'
break;
case 476:return 'OVERRIDE'
break;
case 477:return 'OWNER'
break;
case 478:return 'PAD'
break;
case 479:return 'PARALLEL'
break;
case 480:return 'PARAMETER'
break;
case 481:return 'PARAMETERS'
break;
case 482:return 'PARTIAL'
break;
case 483:return 'PARTITION'
break;
case 484:return 'PARTITIONED'
break;
case 485:return 'PARTITIONS'
break;
case 486:return 'PATH'
break;
case 487:return 'PERCENT'
break;
case 488:return 'PERCENTILE'
break;
case 489:return 'PERMISSION'
break;
case 490:return 'PERMISSIONS'
break;
case 491:return 'PIPE'
break;
case 492:return 'PIPELINED'
break;
case 493:return 'PLAN'
break;
case 494:return 'POOL'
break;
case 495:return 'POSITION'
break;
case 496:return 'PRECISION'
break;
case 497:return 'PREPARE'
break;
case 498:return 'PRESERVE'
break;
case 499:return 169
break;
case 500:return 'PRIOR'
break;
case 501:return 'PRIVATE'
break;
case 502:return 'PRIVILEGES'
break;
case 503:return 'PROCEDURE'
break;
case 504:return 'PROCESSED'
break;
case 505:return 'PROJECT'
break;
case 506:return 172
break;
case 507:return 'PROPERTY'
break;
case 508:return 'PROVISIONING'
break;
case 509:return 'PUBLIC'
break;
case 510:return 'PUT'
break;
case 511:return 'QUERY'
break;
case 512:return 'QUIT'
break;
case 513:return 'QUORUM'
break;
case 514:return 'RAISE'
break;
case 515:return 87
break;
case 516:return 'RANGE'
break;
case 517:return 'RANK'
break;
case 518:return 'RAW'
break;
case 519:return 'READ'
break;
case 520:return 'READS'
break;
case 521:return 'REAL'
break;
case 522:return 'REBUILD'
break;
case 523:return 'RECORD'
break;
case 524:return 'RECURSIVE'
break;
case 525:return 'REDUCE'
break;
case 526:return 'REF'
break;
case 527:return 'REFERENCE'
break;
case 528:return 'REFERENCES'
break;
case 529:return 'REFERENCING'
break;
case 530:return 'REGEXP'
break;
case 531:return 'REGION'
break;
case 532:return 'REINDEX'
break;
case 533:return 'RELATIVE'
break;
case 534:return 'RELEASE'
break;
case 535:return 'REMAINDER'
break;
case 536:return 'RENAME'
break;
case 537:return 'REPEAT'
break;
case 538:return 113
break;
case 539:return 'REQUEST'
break;
case 540:return 'RESET'
break;
case 541:return 'RESIGNAL'
break;
case 542:return 'RESOURCE'
break;
case 543:return 'RESPONSE'
break;
case 544:return 'RESTORE'
break;
case 545:return 'RESTRICT'
break;
case 546:return 'RESULT'
break;
case 547:return 'RETURN'
break;
case 548:return 'RETURNING'
break;
case 549:return 'RETURNS'
break;
case 550:return 'REVERSE'
break;
case 551:return 'REVOKE'
break;
case 552:return 'RIGHT'
break;
case 553:return 'ROLE'
break;
case 554:return 'ROLES'
break;
case 555:return 'ROLLBACK'
break;
case 556:return 'ROLLUP'
break;
case 557:return 'ROUTINE'
break;
case 558:return 'ROW'
break;
case 559:return 'ROWS'
break;
case 560:return 'RULE'
break;
case 561:return 'RULES'
break;
case 562:return 'SAMPLE'
break;
case 563:return 'SATISFIES'
break;
case 564:return 'SAVE'
break;
case 565:return 'SAVEPOINT'
break;
case 566:return 185
break;
case 567:return 'SCHEMA'
break;
case 568:return 'SCOPE'
break;
case 569:return 'SCROLL'
break;
case 570:return 'SEARCH'
break;
case 571:return 'SECOND'
break;
case 572:return 'SECTION'
break;
case 573:return 'SEGMENT'
break;
case 574:return 'SEGMENTS'
break;
case 575:return 143
break;
case 576:return 'SELF'
break;
case 577:return 'SEMI'
break;
case 578:return 'SENSITIVE'
break;
case 579:return 'SEPARATE'
break;
case 580:return 'SEQUENCE'
break;
case 581:return 'SERIALIZABLE'
break;
case 582:return 'SESSION'
break;
case 583:return 97
break;
case 584:return 'SETS'
break;
case 585:return 'SHARD'
break;
case 586:return 'SHARE'
break;
case 587:return 'SHARED'
break;
case 588:return 'SHORT'
break;
case 589:return 177
break;
case 590:return 'SIGNAL'
break;
case 591:return 'SIMILAR'
break;
case 592:return 'SIZE'
break;
case 593:return 'SKEWED'
break;
case 594:return 'SMALLINT'
break;
case 595:return 'SNAPSHOT'
break;
case 596:return 'SOME'
break;
case 597:return 'SOURCE'
break;
case 598:return 'SPACE'
break;
case 599:return 'SPACES'
break;
case 600:return 'SPARSE'
break;
case 601:return 'SPECIFIC'
break;
case 602:return 'SPECIFICTYPE'
break;
case 603:return 'SPLIT'
break;
case 604:return 'SQL'
break;
case 605:return 'SQLCODE'
break;
case 606:return 'SQLERROR'
break;
case 607:return 'SQLEXCEPTION'
break;
case 608:return 'SQLSTATE'
break;
case 609:return 'SQLWARNING'
break;
case 610:return 'START'
break;
case 611:return 'STATE'
break;
case 612:return 'STATIC'
break;
case 613:return 'STATUS'
break;
case 614:return 'STORAGE'
break;
case 615:return 'STORE'
break;
case 616:return 'STORED'
break;
case 617:return 'STREAM'
break;
case 618:return 176
break;
case 619:return 'STRUCT'
break;
case 620:return 'STYLE'
break;
case 621:return 'SUB'
break;
case 622:return 'SUBMULTISET'
break;
case 623:return 'SUBPARTITION'
break;
case 624:return 'SUBSTRING'
break;
case 625:return 'SUBTYPE'
break;
case 626:return 'SUM'
break;
case 627:return 'SUPER'
break;
case 628:return 'SYMMETRIC'
break;
case 629:return 'SYNONYM'
break;
case 630:return 'SYSTEM'
break;
case 631:return 159
break;
case 632:return 'TABLESAMPLE'
break;
case 633:return 'TEMP'
break;
case 634:return 'TEMPORARY'
break;
case 635:return 'TERMINATED'
break;
case 636:return 'TEXT'
break;
case 637:return 'THAN'
break;
case 638:return 'THEN'
break;
case 639:return 171
break;
case 640:return 'TIME'
break;
case 641:return 'TIMESTAMP'
break;
case 642:return 'TIMEZONE'
break;
case 643:return 'TINYINT'
break;
case 644:return 'TO'
break;
case 645:return 'TOKEN'
break;
case 646:return 'TOTAL'
break;
case 647:return 'TOUCH'
break;
case 648:return 'TRAILING'
break;
case 649:return 'TRANSACTION'
break;
case 650:return 'TRANSFORM'
break;
case 651:return 'TRANSLATE'
break;
case 652:return 'TRANSLATION'
break;
case 653:return 'TREAT'
break;
case 654:return 'TRIGGER'
break;
case 655:return 'TRIM'
break;
case 656:return 36
break;
case 657:return 'TRUNCATE'
break;
case 658:return 'TTL'
break;
case 659:return 'TUPLE'
break;
case 660:return 'TYPE'
break;
case 661:return 'UNDER'
break;
case 662:return 'UNDO'
break;
case 663:return 'UNION'
break;
case 664:return 'UNIQUE'
break;
case 665:return 'UNIT'
break;
case 666:return 'UNKNOWN'
break;
case 667:return 'UNLOGGED'
break;
case 668:return 'UNNEST'
break;
case 669:return 'UNPROCESSED'
break;
case 670:return 'UNSIGNED'
break;
case 671:return 'UNTIL'
break;
case 672:return 105
break;
case 673:return 'UPPER'
break;
case 674:return 'URL'
break;
case 675:return 'USAGE'
break;
case 676:return 135
break;
case 677:return 'USER'
break;
case 678:return 'USERS'
break;
case 679:return 'USING'
break;
case 680:return 'UUID'
break;
case 681:return 'VACUUM'
break;
case 682:return 'VALUE'
break;
case 683:return 'VALUED'
break;
case 684:return 99
break;
case 685:return 'VARCHAR'
break;
case 686:return 'VARIABLE'
break;
case 687:return 'VARIANCE'
break;
case 688:return 'VARINT'
break;
case 689:return 'VARYING'
break;
case 690:return 'VIEW'
break;
case 691:return 'VIEWS'
break;
case 692:return 'VIRTUAL'
break;
case 693:return 'VOID'
break;
case 694:return 'WAIT'
break;
case 695:return 'WHEN'
break;
case 696:return 'WHENEVER'
break;
case 697:return 107
break;
case 698:return 'WHILE'
break;
case 699:return 'WINDOW'
break;
case 700:return 'WITH'
break;
case 701:return 'WITHIN'
break;
case 702:return 'WITHOUT'
break;
case 703:return 'WORK'
break;
case 704:return 'WRAPPED'
break;
case 705:return 'WRITE'
break;
case 706:return 'YEAR'
break;
case 707:return 'ZONE'
break;
case 708:return 'JSON'
break;
case 709:return 84
break;
case 710:return 29
break;
case 711:return 29
break;
case 712:return 'TILDEs'
break;
case 713:return 110
break;
case 714:return 90
break;
case 715:return 91
break;
case 716:return 92
break;
case 717:return 93
break;
case 718:return 'REM'
break;
case 719:return 'RSHIFT'
break;
case 720:return 'LSHIFT'
break;
case 721:return 'NE'
break;
case 722:return 'NE'
break;
case 723:return 148
break;
case 724:return 147
break;
case 725:return 150
break;
case 726:return 149
break;
case 727:return 104
break;
case 728:return 'BITAND'
break;
case 729:return 'BITOR'
break;
case 730:return 71
break;
case 731:return 73
break;
case 732:return 61
break;
case 733:return 63
break;
case 734:return 51
break;
case 735:return 53
break;
case 736:return 24
break;
case 737:return 54
break;
case 738:return 65
break;
case 739:return 6
break;
case 740:return 'DOLLAR'
break;
case 741:return 'QUESTION'
break;
case 742:return 'CARET'
break;
case 743:return 21
break;
case 744:return 5
break;
case 745:return 'INVALID'
break;
}
},
rules: [/^(?:([`](\\.|[^"]|\\")*?[`])+)/i,/^(?:(['](\\.|[^']|\\')*?['])+)/i,/^(?:(["](\\.|[^"]|\\")*?["])+)/i,/^(?:--(.*?)($|\r\n|\r|\n))/i,/^(?:\s+)/i,/^(?:ABORT\b)/i,/^(?:ADD\b)/i,/^(?:AFTER\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ATTACH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CHECK\b)/i,/^(?:COLLATE\b)/i,/^(?:COLUMN\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONSISTENT_READ\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CURRENT_DATE\b)/i,/^(?:CURRENT_TIME\b)/i,/^(?:CURRENT_TIMESTAMP\b)/i,/^(?:DATABASE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DETACH\b)/i,/^(?:DISTINCT\b)/i,/^(?:DROP\b)/i,/^(?:DESCRIBE\b)/i,/^(?:EACH\b)/i,/^(?:ELSE\b)/i,/^(?:END\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXPLAIN\b)/i,/^(?:FAIL\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GLOB\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IN\b)/i,/^(?:USE\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INITIALLY\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:ISNULL\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:CONTAINS\b)/i,/^(?:LIMIT\b)/i,/^(?:MATCH\b)/i,/^(?:NATURAL\b)/i,/^(?:NO\b)/i,/^(?:NOT\b)/i,/^(?:NOTNULL\b)/i,/^(?:NULL\b)/i,/^(?:UNDEFINED\b)/i,/^(?:OF\b)/i,/^(?:OFFSET\b)/i,/^(?:ON\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PLAN\b)/i,/^(?:PRAGMA\b)/i,/^(?:PRIMARY\b)/i,/^(?:QUERY\b)/i,/^(?:RAISE\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REGEXP\b)/i,/^(?:REINDEX\b)/i,/^(?:RELEASE\b)/i,/^(?:RENAME\b)/i,/^(?:REPLACE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROW\b)/i,/^(?:SELECT\b)/i,/^(?:SCAN\b)/i,/^(?:SET\b)/i,/^(?:TABLE\b)/i,/^(?:TEMP\b)/i,/^(?:THEN\b)/i,/^(?:TO\b)/i,/^(?:TRIGGER\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USING\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUES\b)/i,/^(?:VIEW\b)/i,/^(?:WHEN\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:TRUE\b)/i,/^(?:FALSE\b)/i,/^(?:SHOW\b)/i,/^(?:TABLES\b)/i,/^(?:STRING\b)/i,/^(?:NUMBER\b)/i,/^(?:STRINGSET\b)/i,/^(?:NUMBERSET\b)/i,/^(?:BINARYSET\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:GSI\b)/i,/^(?:LSI\b)/i,/^(?:PROJECTION\b)/i,/^(?:ALL\b)/i,/^(?:KEYS_ONLY\b)/i,/^(?:NEW\b)/i,/^(?:DEBUG\b)/i,/^(?:ALLOCATE\b)/i,/^(?:ALTER\b)/i,/^(?:ANALYZE\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:ARCHIVE\b)/i,/^(?:ARE\b)/i,/^(?:ARRAY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:ASCII\b)/i,/^(?:ASENSITIVE\b)/i,/^(?:ASSERTION\b)/i,/^(?:ASYMMETRIC\b)/i,/^(?:AT\b)/i,/^(?:ATOMIC\b)/i,/^(?:ATTACH\b)/i,/^(?:ATTRIBUTE\b)/i,/^(?:AUTH\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:AUTHORIZE\b)/i,/^(?:AUTO\b)/i,/^(?:AVG\b)/i,/^(?:BACK\b)/i,/^(?:BACKUP\b)/i,/^(?:BASE\b)/i,/^(?:BATCH\b)/i,/^(?:BEFORE\b)/i,/^(?:BEGIN\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BIT\b)/i,/^(?:BLOB\b)/i,/^(?:BLOCK\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BOTH\b)/i,/^(?:BREADTH\b)/i,/^(?:BUCKET\b)/i,/^(?:BULK\b)/i,/^(?:BY\b)/i,/^(?:BYTE\b)/i,/^(?:CALL\b)/i,/^(?:CALLED\b)/i,/^(?:CALLING\b)/i,/^(?:CAPACITY\b)/i,/^(?:CASCADE\b)/i,/^(?:CASCADED\b)/i,/^(?:CASE\b)/i,/^(?:CAST\b)/i,/^(?:CATALOG\b)/i,/^(?:CHAR\b)/i,/^(?:CHARACTER\b)/i,/^(?:CHECK\b)/i,/^(?:CLASS\b)/i,/^(?:CLOB\b)/i,/^(?:CLOSE\b)/i,/^(?:CLUSTER\b)/i,/^(?:CLUSTERED\b)/i,/^(?:CLUSTERING\b)/i,/^(?:CLUSTERS\b)/i,/^(?:COALESCE\b)/i,/^(?:COLLATE\b)/i,/^(?:COLLATION\b)/i,/^(?:COLLECTION\b)/i,/^(?:COLUMN\b)/i,/^(?:COLUMNS\b)/i,/^(?:COMBINE\b)/i,/^(?:COMMENT\b)/i,/^(?:COMMIT\b)/i,/^(?:COMPACT\b)/i,/^(?:COMPILE\b)/i,/^(?:COMPRESS\b)/i,/^(?:CONDITION\b)/i,/^(?:CONFLICT\b)/i,/^(?:CONNECT\b)/i,/^(?:CONNECTION\b)/i,/^(?:CONSISTENCY\b)/i,/^(?:CONSISTENT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONSTRAINTS\b)/i,/^(?:CONSTRUCTOR\b)/i,/^(?:CONSUMED\b)/i,/^(?:CONTINUE\b)/i,/^(?:CONVERT\b)/i,/^(?:COPY\b)/i,/^(?:CORRESPONDING\b)/i,/^(?:COUNT\b)/i,/^(?:COUNTER\b)/i,/^(?:CREATE\b)/i,/^(?:CROSS\b)/i,/^(?:CUBE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:CYCLE\b)/i,/^(?:DATA\b)/i,/^(?:DATABASE\b)/i,/^(?:DATE\b)/i,/^(?:DATETIME\b)/i,/^(?:DAY\b)/i,/^(?:DEALLOCATE\b)/i,/^(?:DEC\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DEFERRABLE\b)/i,/^(?:DEFERRED\b)/i,/^(?:DEFINE\b)/i,/^(?:DEFINED\b)/i,/^(?:DEFINITION\b)/i,/^(?:DELETE\b)/i,/^(?:DELIMITED\b)/i,/^(?:DEPTH\b)/i,/^(?:DEREF\b)/i,/^(?:DESC\b)/i,/^(?:DESCRIBE\b)/i,/^(?:DESCRIPTOR\b)/i,/^(?:DETACH\b)/i,/^(?:DETERMINISTIC\b)/i,/^(?:DIAGNOSTICS\b)/i,/^(?:DIRECTORIES\b)/i,/^(?:DISABLE\b)/i,/^(?:DISCONNECT\b)/i,/^(?:DISTINCT\b)/i,/^(?:DISTRIBUTE\b)/i,/^(?:DO\b)/i,/^(?:DOMAIN\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:DUMP\b)/i,/^(?:DURATION\b)/i,/^(?:DYNAMIC\b)/i,/^(?:EACH\b)/i,/^(?:ELEMENT\b)/i,/^(?:ELSE\b)/i,/^(?:ELSEIF\b)/i,/^(?:EMPTY\b)/i,/^(?:ENABLE\b)/i,/^(?:END\b)/i,/^(?:EQUAL\b)/i,/^(?:EQUALS\b)/i,/^(?:ERROR\b)/i,/^(?:ESCAPE\b)/i,/^(?:ESCAPED\b)/i,/^(?:EVAL\b)/i,/^(?:EVALUATE\b)/i,/^(?:EXCEEDED\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXCEPTION\b)/i,/^(?:EXCEPTIONS\b)/i,/^(?:EXCLUSIVE\b)/i,/^(?:EXEC\b)/i,/^(?:EXECUTE\b)/i,/^(?:EXISTS\b)/i,/^(?:EXIT\b)/i,/^(?:EXPLAIN\b)/i,/^(?:EXPLODE\b)/i,/^(?:EXPORT\b)/i,/^(?:EXPRESSION\b)/i,/^(?:EXTENDED\b)/i,/^(?:EXTERNAL\b)/i,/^(?:EXTRACT\b)/i,/^(?:FAIL\b)/i,/^(?:FALSE\b)/i,/^(?:FAMILY\b)/i,/^(?:FETCH\b)/i,/^(?:FIELDS\b)/i,/^(?:FILE\b)/i,/^(?:FILTER\b)/i,/^(?:FILTERING\b)/i,/^(?:FINAL\b)/i,/^(?:FINISH\b)/i,/^(?:FIRST\b)/i,/^(?:FIXED\b)/i,/^(?:FLATTERN\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FORCE\b)/i,/^(?:FOREIGN\b)/i,/^(?:FORMAT\b)/i,/^(?:FORWARD\b)/i,/^(?:FOUND\b)/i,/^(?:FREE\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:FUNCTION\b)/i,/^(?:FUNCTIONS\b)/i,/^(?:GENERAL\b)/i,/^(?:GENERATE\b)/i,/^(?:GET\b)/i,/^(?:GLOB\b)/i,/^(?:GLOBAL\b)/i,/^(?:GO\b)/i,/^(?:GOTO\b)/i,/^(?:GRANT\b)/i,/^(?:GREATER\b)/i,/^(?:GROUP\b)/i,/^(?:GROUPING\b)/i,/^(?:HANDLER\b)/i,/^(?:HASH\b)/i,/^(?:HAVE\b)/i,/^(?:HAVING\b)/i,/^(?:HEAP\b)/i,/^(?:HIDDEN\b)/i,/^(?:HOLD\b)/i,/^(?:HOUR\b)/i,/^(?:IDENTIFIED\b)/i,/^(?:IDENTITY\b)/i,/^(?:IF\b)/i,/^(?:IGNORE\b)/i,/^(?:IMMEDIATE\b)/i,/^(?:IMPORT\b)/i,/^(?:IN\b)/i,/^(?:INCLUDING\b)/i,/^(?:INCLUSIVE\b)/i,/^(?:INCREMENT\b)/i,/^(?:INCREMENTAL\b)/i,/^(?:INDEX\b)/i,/^(?:INDEXED\b)/i,/^(?:INDEXES\b)/i,/^(?:INDICATOR\b)/i,/^(?:INFINITE\b)/i,/^(?:INITIALLY\b)/i,/^(?:INLINE\b)/i,/^(?:INNER\b)/i,/^(?:INNTER\b)/i,/^(?:INOUT\b)/i,/^(?:INPUT\b)/i,/^(?:INSENSITIVE\b)/i,/^(?:INSERT\b)/i,/^(?:INSTEAD\b)/i,/^(?:INT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTERSECT\b)/i,/^(?:INTERVAL\b)/i,/^(?:INTO\b)/i,/^(?:INVALIDATE\b)/i,/^(?:IS\b)/i,/^(?:ISOLATION\b)/i,/^(?:ITEM\b)/i,/^(?:ITEMS\b)/i,/^(?:ITERATE\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:KEYS\b)/i,/^(?:LAG\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LARGE\b)/i,/^(?:LAST\b)/i,/^(?:LATERAL\b)/i,/^(?:LEAD\b)/i,/^(?:LEADING\b)/i,/^(?:LEAVE\b)/i,/^(?:LEFT\b)/i,/^(?:LENGTH\b)/i,/^(?:LESS\b)/i,/^(?:LEVEL\b)/i,/^(?:LIKE\b)/i,/^(?:LIMIT\b)/i,/^(?:LIMITED\b)/i,/^(?:LINES\b)/i,/^(?:LIST\b)/i,/^(?:LOAD\b)/i,/^(?:LOCAL\b)/i,/^(?:LOCALTIME\b)/i,/^(?:LOCALTIMESTAMP\b)/i,/^(?:LOCATION\b)/i,/^(?:LOCATOR\b)/i,/^(?:LOCK\b)/i,/^(?:LOCKS\b)/i,/^(?:LOG\b)/i,/^(?:LOGED\b)/i,/^(?:LONG\b)/i,/^(?:LOOP\b)/i,/^(?:LOWER\b)/i,/^(?:MAP\b)/i,/^(?:MATCH\b)/i,/^(?:MATERIALIZED\b)/i,/^(?:MAX\b)/i,/^(?:MAXLEN\b)/i,/^(?:MEMBER\b)/i,/^(?:MERGE\b)/i,/^(?:METHOD\b)/i,/^(?:METRICS\b)/i,/^(?:MIN\b)/i,/^(?:MINUS\b)/i,/^(?:MINUTE\b)/i,/^(?:MISSING\b)/i,/^(?:MOD\b)/i,/^(?:MODE\b)/i,/^(?:MODIFIES\b)/i,/^(?:MODIFY\b)/i,/^(?:MODULE\b)/i,/^(?:MONTH\b)/i,/^(?:MULTI\b)/i,/^(?:MULTISET\b)/i,/^(?:NAME\b)/i,/^(?:NAMES\b)/i,/^(?:NATIONAL\b)/i,/^(?:NATURAL\b)/i,/^(?:NCHAR\b)/i,/^(?:NCLOB\b)/i,/^(?:NEW\b)/i,/^(?:NEXT\b)/i,/^(?:NO\b)/i,/^(?:NONE\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NULLIF\b)/i,/^(?:NUMBER\b)/i,/^(?:NUMERIC\b)/i,/^(?:OBJECT\b)/i,/^(?:OF\b)/i,/^(?:OFFLINE\b)/i,/^(?:OFFSET\b)/i,/^(?:OLD\b)/i,/^(?:ON\b)/i,/^(?:ONLINE\b)/i,/^(?:ONLY\b)/i,/^(?:OPAQUE\b)/i,/^(?:OPEN\b)/i,/^(?:OPERATOR\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:ORDINALITY\b)/i,/^(?:OTHER\b)/i,/^(?:OTHERS\b)/i,/^(?:OUT\b)/i,/^(?:OUTER\b)/i,/^(?:OUTPUT\b)/i,/^(?:OVER\b)/i,/^(?:OVERLAPS\b)/i,/^(?:OVERRIDE\b)/i,/^(?:OWNER\b)/i,/^(?:PAD\b)/i,/^(?:PARALLEL\b)/i,/^(?:PARAMETER\b)/i,/^(?:PARAMETERS\b)/i,/^(?:PARTIAL\b)/i,/^(?:PARTITION\b)/i,/^(?:PARTITIONED\b)/i,/^(?:PARTITIONS\b)/i,/^(?:PATH\b)/i,/^(?:PERCENT\b)/i,/^(?:PERCENTILE\b)/i,/^(?:PERMISSION\b)/i,/^(?:PERMISSIONS\b)/i,/^(?:PIPE\b)/i,/^(?:PIPELINED\b)/i,/^(?:PLAN\b)/i,/^(?:POOL\b)/i,/^(?:POSITION\b)/i,/^(?:PRECISION\b)/i,/^(?:PREPARE\b)/i,/^(?:PRESERVE\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIOR\b)/i,/^(?:PRIVATE\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PROCESSED\b)/i,/^(?:PROJECT\b)/i,/^(?:PROJECTION\b)/i,/^(?:PROPERTY\b)/i,/^(?:PROVISIONING\b)/i,/^(?:PUBLIC\b)/i,/^(?:PUT\b)/i,/^(?:QUERY\b)/i,/^(?:QUIT\b)/i,/^(?:QUORUM\b)/i,/^(?:RAISE\b)/i,/^(?:RANDOM\b)/i,/^(?:RANGE\b)/i,/^(?:RANK\b)/i,/^(?:RAW\b)/i,/^(?:READ\b)/i,/^(?:READS\b)/i,/^(?:REAL\b)/i,/^(?:REBUILD\b)/i,/^(?:RECORD\b)/i,/^(?:RECURSIVE\b)/i,/^(?:REDUCE\b)/i,/^(?:REF\b)/i,/^(?:REFERENCE\b)/i,/^(?:REFERENCES\b)/i,/^(?:REFERENCING\b)/i,/^(?:REGEXP\b)/i,/^(?:REGION\b)/i,/^(?:REINDEX\b)/i,/^(?:RELATIVE\b)/i,/^(?:RELEASE\b)/i,/^(?:REMAINDER\b)/i,/^(?:RENAME\b)/i,/^(?:REPEAT\b)/i,/^(?:REPLACE\b)/i,/^(?:REQUEST\b)/i,/^(?:RESET\b)/i,/^(?:RESIGNAL\b)/i,/^(?:RESOURCE\b)/i,/^(?:RESPONSE\b)/i,/^(?:RESTORE\b)/i,/^(?:RESTRICT\b)/i,/^(?:RESULT\b)/i,/^(?:RETURN\b)/i,/^(?:RETURNING\b)/i,/^(?:RETURNS\b)/i,/^(?:REVERSE\b)/i,/^(?:REVOKE\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLE\b)/i,/^(?:ROLES\b)/i,/^(?:ROLLBACK\b)/i,/^(?:ROLLUP\b)/i,/^(?:ROUTINE\b)/i,/^(?:ROW\b)/i,/^(?:ROWS\b)/i,/^(?:RULE\b)/i,/^(?:RULES\b)/i,/^(?:SAMPLE\b)/i,/^(?:SATISFIES\b)/i,/^(?:SAVE\b)/i,/^(?:SAVEPOINT\b)/i,/^(?:SCAN\b)/i,/^(?:SCHEMA\b)/i,/^(?:SCOPE\b)/i,/^(?:SCROLL\b)/i,/^(?:SEARCH\b)/i,/^(?:SECOND\b)/i,/^(?:SECTION\b)/i,/^(?:SEGMENT\b)/i,/^(?:SEGMENTS\b)/i,/^(?:SELECT\b)/i,/^(?:SELF\b)/i,/^(?:SEMI\b)/i,/^(?:SENSITIVE\b)/i,/^(?:SEPARATE\b)/i,/^(?:SEQUENCE\b)/i,/^(?:SERIALIZABLE\b)/i,/^(?:SESSION\b)/i,/^(?:SET\b)/i,/^(?:SETS\b)/i,/^(?:SHARD\b)/i,/^(?:SHARE\b)/i,/^(?:SHARED\b)/i,/^(?:SHORT\b)/i,/^(?:SHOW\b)/i,/^(?:SIGNAL\b)/i,/^(?:SIMILAR\b)/i,/^(?:SIZE\b)/i,/^(?:SKEWED\b)/i,/^(?:SMALLINT\b)/i,/^(?:SNAPSHOT\b)/i,/^(?:SOME\b)/i,/^(?:SOURCE\b)/i,/^(?:SPACE\b)/i,/^(?:SPACES\b)/i,/^(?:SPARSE\b)/i,/^(?:SPECIFIC\b)/i,/^(?:SPECIFICTYPE\b)/i,/^(?:SPLIT\b)/i,/^(?:SQL\b)/i,/^(?:SQLCODE\b)/i,/^(?:SQLERROR\b)/i,/^(?:SQLEXCEPTION\b)/i,/^(?:SQLSTATE\b)/i,/^(?:SQLWARNING\b)/i,/^(?:START\b)/i,/^(?:STATE\b)/i,/^(?:STATIC\b)/i,/^(?:STATUS\b)/i,/^(?:STORAGE\b)/i,/^(?:STORE\b)/i,/^(?:STORED\b)/i,/^(?:STREAM\b)/i,/^(?:STRING\b)/i,/^(?:STRUCT\b)/i,/^(?:STYLE\b)/i,/^(?:SUB\b)/i,/^(?:SUBMULTISET\b)/i,/^(?:SUBPARTITION\b)/i,/^(?:SUBSTRING\b)/i,/^(?:SUBTYPE\b)/i,/^(?:SUM\b)/i,/^(?:SUPER\b)/i,/^(?:SYMMETRIC\b)/i,/^(?:SYNONYM\b)/i,/^(?:SYSTEM\b)/i,/^(?:TABLE\b)/i,/^(?:TABLESAMPLE\b)/i,/^(?:TEMP\b)/i,/^(?:TEMPORARY\b)/i,/^(?:TERMINATED\b)/i,/^(?:TEXT\b)/i,/^(?:THAN\b)/i,/^(?:THEN\b)/i,/^(?:THROUGHPUT\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TIMEZONE\b)/i,/^(?:TINYINT\b)/i,/^(?:TO\b)/i,/^(?:TOKEN\b)/i,/^(?:TOTAL\b)/i,/^(?:TOUCH\b)/i,/^(?:TRAILING\b)/i,/^(?:TRANSACTION\b)/i,/^(?:TRANSFORM\b)/i,/^(?:TRANSLATE\b)/i,/^(?:TRANSLATION\b)/i,/^(?:TREAT\b)/i,/^(?:TRIGGER\b)/i,/^(?:TRIM\b)/i,/^(?:TRUE\b)/i,/^(?:TRUNCATE\b)/i,/^(?:TTL\b)/i,/^(?:TUPLE\b)/i,/^(?:TYPE\b)/i,/^(?:UNDER\b)/i,/^(?:UNDO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UNIT\b)/i,/^(?:UNKNOWN\b)/i,/^(?:UNLOGGED\b)/i,/^(?:UNNEST\b)/i,/^(?:UNPROCESSED\b)/i,/^(?:UNSIGNED\b)/i,/^(?:UNTIL\b)/i,/^(?:UPDATE\b)/i,/^(?:UPPER\b)/i,/^(?:URL\b)/i,/^(?:USAGE\b)/i,/^(?:USE\b)/i,/^(?:USER\b)/i,/^(?:USERS\b)/i,/^(?:USING\b)/i,/^(?:UUID\b)/i,/^(?:VACUUM\b)/i,/^(?:VALUE\b)/i,/^(?:VALUED\b)/i,/^(?:VALUES\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARIABLE\b)/i,/^(?:VARIANCE\b)/i,/^(?:VARINT\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:VIEWS\b)/i,/^(?:VIRTUAL\b)/i,/^(?:VOID\b)/i,/^(?:WAIT\b)/i,/^(?:WHEN\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WHILE\b)/i,/^(?:WINDOW\b)/i,/^(?:WITH\b)/i,/^(?:WITHIN\b)/i,/^(?:WITHOUT\b)/i,/^(?:WORK\b)/i,/^(?:WRAPPED\b)/i,/^(?:WRITE\b)/i,/^(?:YEAR\b)/i,/^(?:ZONE\b)/i,/^(?:JSON\b)/i,/^(?:MATH\b)/i,/^(?:[-]?(\d*[.])?\d+[eE]\d+)/i,/^(?:[-]?(\d*[.])?\d+)/i,/^(?:~)/i,/^(?:\+=)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:%)/i,/^(?:>>)/i,/^(?:<<)/i,/^(?:<>)/i,/^(?:!=)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:=)/i,/^(?:&)/i,/^(?:\|)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\.)/i,/^(?:,)/i,/^(?::)/i,/^(?:;)/i,/^(?:\$)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:[a-zA-Z_][a-zA-Z_0-9]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515,516,517,518,519,520,521,522,523,524,525,526,527,528,529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549,550,551,552,553,554,555,556,557,558,559,560,561,562,563,564,565,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,583,584,585,586,587,588,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,608,609,610,611,612,613,614,615,616,617,618,619,620,621,622,623,624,625,626,627,628,629,630,631,632,633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}